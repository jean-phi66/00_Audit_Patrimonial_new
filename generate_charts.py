#!/usr/bin/env python3
"""
Script pour g√©n√©rer les graphiques de l'audit patrimonial √† partir d'un fichier JSON.

Ce script prend en entr√©e un fichier JSON g√©n√©r√© par la fonctionnalit√© de sauvegarde
de l'application Streamlit et g√©n√®re automatiquement les graphiques des pages :
- "Description du patrimoine" 
- "Flux : revenus et d√©penses"
- "Focus Immobilier"

Les graphiques g√©n√©r√©s sont identiques √† ceux affich√©s dans l'interface utilisateur.

Usage:
    python generate_charts.py patrimoine_data.json
    python generate_charts.py patrimoine_data.json --tmi 41 --projection-years 15
    python generate_charts.py patrimoine_data.json --output my_charts --no-png

Options:
    --tmi: Taux Marginal d'Imposition (0, 11, 30, 41, 45) - d√©faut: 30
    --projection-years: Dur√©e de projection en ann√©es - d√©faut: 10
    --output: R√©pertoire de sortie - d√©faut: charts_output
    --no-png: Ne pas g√©n√©rer les fichiers PNG
    --no-html: Ne pas g√©n√©rer les fichiers HTML

Output:
    - Dossier sp√©cifi√© contenant tous les graphiques au format PNG et/ou HTML
    - Graphiques du patrimoine: treemap, donut, barres empil√©es, comparaison INSEE
    - Graphiques des flux: treemap mensuel et annuel
    - Graphiques immobiliers: waterfall cash-flow, projections, amortissement LMNP
"""

import argparse
import json
import os
import sys
from datetime import date, datetime
from pathlib import Path

# Ajouter le r√©pertoire du projet au chemin Python
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

# Imports des modules du projet
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from plotly.subplots import make_subplots

# Import des fonctions sp√©cifiques au projet
from core.charts import (
    create_patrimoine_brut_treemap,
    create_patrimoine_net_treemap, 
    create_patrimoine_net_donut,
    create_patrimoine_ideal_donut,
    create_patrimoine_brut_stacked_bar,
    create_patrimoine_net_stacked_bar,
    create_flux_treemap_mensuel,
    create_flux_treemap_annuel
)
from core.patrimoine_logic import (
    get_patrimoine_df,
    find_associated_loans,
    calculate_loan_annual_breakdown
)
from core.patrimoine_display import create_patrimoine_comparison_chart, INSEE_PATRIMOINE_DECILES_2021, INSEE_PATRIMOINE_BRUT_DECILES_2021

# Import des fonctions Focus Immobilier
from core.immobilier_charts import (
    calculate_property_metrics,
    create_waterfall_fig,
    generate_projection_data,
    create_cash_flow_projection_fig,
    create_leverage_projection_fig,
    create_amortissement_projection_fig,
    create_non_productive_waterfall_fig
)

# Trick to avoid export of plotly images as Black & White 
import plotly.io as pio
pio.templates.default = "plotly"

def json_decoder_hook(obj):
    """D√©codeur JSON personnalis√© pour reconstruire les objets date."""
    if '_type' in obj:
        if obj['_type'] == 'date':
            return datetime.fromisoformat(obj['value']).date()
        elif obj['_type'] == 'MarginalRateTaxScale':
            # Pour les objets OpenFisca non s√©rialisables, on retourne None
            return None
    return obj


def load_data_from_json(json_file_path):
    """Charge les donn√©es depuis un fichier JSON."""
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f, object_hook=json_decoder_hook)
        return data
    except Exception as e:
        print(f"Erreur lors du chargement du fichier JSON : {e}")
        sys.exit(1)


def create_output_directory(output_dir="charts_output"):
    """Cr√©e le r√©pertoire de sortie s'il n'existe pas."""
    Path(output_dir).mkdir(exist_ok=True)
    return output_dir


def save_chart(fig, filename, output_dir, save_png=True, save_html=True):
    """Sauvegarde un graphique en PNG et/ou HTML."""
    if fig is None:
        print(f"‚ö†Ô∏è  Graphique {filename} est vide, non sauvegard√©.")
        return
    
    base_path = os.path.join(output_dir, filename)
    
    if save_png:
        try:
            fig.write_image(f"{base_path}.png", width=1200, height=800, scale=2)
            print(f"‚úÖ Graphique sauvegard√© : {base_path}.png")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde PNG {filename}: {e}")
    
    if save_html:
        try:
            fig.write_html(f"{base_path}.html")
            print(f"‚úÖ Graphique sauvegard√© : {base_path}.html")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde HTML {filename}: {e}")


def generate_patrimoine_charts(data, output_dir, save_png=True, save_html=True):
    """G√©n√®re tous les graphiques de la page 'Description du patrimoine'."""
    print("\nüìä G√©n√©ration des graphiques du patrimoine...")
    
    # R√©cup√©ration des donn√©es
    actifs = data.get('actifs', [])
    passifs = data.get('passifs', [])
    
    if not actifs and not passifs:
        print("‚ö†Ô∏è  Aucune donn√©e de patrimoine trouv√©e.")
        return
    
    # Cr√©ation du DataFrame patrimoine
    df_patrimoine = get_patrimoine_df(actifs, passifs)
    
    if df_patrimoine.empty:
        print("‚ö†Ô∏è  DataFrame patrimoine vide.")
        return
    
    print(f"üìã DataFrame patrimoine cr√©√© avec {len(df_patrimoine)} entr√©es")
    
    # 1. Treemap du patrimoine brut
    fig_brut_treemap = create_patrimoine_brut_treemap(df_patrimoine)
    save_chart(fig_brut_treemap, "patrimoine_brut_treemap", output_dir, save_png, save_html)
    
    # 2. Treemap du patrimoine net
    fig_net_treemap = create_patrimoine_net_treemap(df_patrimoine)
    save_chart(fig_net_treemap, "patrimoine_net_treemap", output_dir, save_png, save_html)
    
    # 3. Donut chart patrimoine net
    fig_net_donut = create_patrimoine_net_donut(df_patrimoine)
    save_chart(fig_net_donut, "patrimoine_net_donut", output_dir, save_png, save_html)
    
    # 4. Donut chart r√©partition id√©ale
    fig_ideal_donut = create_patrimoine_ideal_donut()
    save_chart(fig_ideal_donut, "patrimoine_ideal_donut", output_dir, save_png, save_html)
    
    # 5. Barres empil√©es patrimoine brut
    fig_brut_bar = create_patrimoine_brut_stacked_bar(df_patrimoine)
    save_chart(fig_brut_bar, "patrimoine_brut_stacked_bar", output_dir, save_png, save_html)
    
    # 6. Barres empil√©es patrimoine net
    fig_net_bar = create_patrimoine_net_stacked_bar(df_patrimoine)
    save_chart(fig_net_bar, "patrimoine_net_stacked_bar", output_dir, save_png, save_html)
    
    # 7. Graphiques de comparaison INSEE
    total_actifs = sum(a.get('valeur', 0.0) for a in actifs)
    total_passifs = sum(p.get('crd_calcule', 0.0) for p in passifs)
    patrimoine_net = total_actifs - total_passifs
    
    if total_actifs > 0:
        fig_brut_comparison = create_patrimoine_comparison_chart(
            total_actifs, 
            INSEE_PATRIMOINE_BRUT_DECILES_2021,
            "Positionnement patrimoine brut",
            "255, 140, 0"
        )
        save_chart(fig_brut_comparison, "patrimoine_brut_comparison_insee", output_dir, save_png, save_html)
    
    if patrimoine_net > 0:
        fig_net_comparison = create_patrimoine_comparison_chart(
            patrimoine_net,
            INSEE_PATRIMOINE_DECILES_2021, 
            "Positionnement patrimoine net",
            "34, 139, 34"
        )
        save_chart(fig_net_comparison, "patrimoine_net_comparison_insee", output_dir, save_png, save_html)


def generate_flux_charts(data, output_dir, save_png=True, save_html=True):
    """G√©n√®re tous les graphiques de la page 'Flux : revenus et d√©penses'."""
    print("\nüí∏ G√©n√©ration des graphiques des flux...")
    
    # R√©cup√©ration des donn√©es
    revenus = data.get('revenus', [])
    depenses = data.get('depenses', [])
    
    if not revenus and not depenses:
        print("‚ö†Ô∏è  Aucune donn√©e de flux trouv√©e.")
        return
    
    # Calcul des totaux
    total_revenus = sum(r.get('montant', 0.0) for r in revenus)
    total_depenses = sum(d.get('montant', 0.0) for d in depenses)
    capacite_epargne = total_revenus - total_depenses
    
    print(f"üí∞ Total revenus: {total_revenus:,.2f} ‚Ç¨")
    print(f"üí∏ Total d√©penses: {total_depenses:,.2f} ‚Ç¨")
    print(f"üíé Capacit√© d'√©pargne: {capacite_epargne:,.2f} ‚Ç¨")
    
    if total_revenus > 0:
        # Pr√©paration des donn√©es pour le treemap (m√™me logique que dans flux_display.py)
        df_depenses = pd.DataFrame(depenses)
        data_treemap = []
        
        if not df_depenses.empty and df_depenses['montant'].sum() > 0:
            # Regrouper les d√©penses par cat√©gorie
            depenses_par_cat = df_depenses.groupby('categorie')['montant'].sum().reset_index()
            depenses_par_cat.rename(columns={'categorie': 'label'}, inplace=True)
            data_treemap = depenses_par_cat.to_dict('records')
        
        # Ajouter le reste √† vivre s'il est positif
        if capacite_epargne > 0:
            data_treemap.append({'label': 'Reste √† vivre', 'montant': capacite_epargne})
        
        # Utilisation des fonctions r√©utilisables du module charts
        if data_treemap:
            # 1. Treemap Mensuel
            fig_mensuel = create_flux_treemap_mensuel(data_treemap, total_revenus)
            save_chart(fig_mensuel, "flux_treemap_mensuel", output_dir, save_png, save_html)
            
            # 2. Treemap Annuel  
            fig_annuel = create_flux_treemap_annuel(data_treemap, total_revenus)
            save_chart(fig_annuel, "flux_treemap_annuel", output_dir, save_png, save_html)
        else:
            print("‚ö†Ô∏è  Aucune donn√©e de flux √† afficher.")
    else:
        print("‚ö†Ô∏è  Aucun revenu trouv√©.")


def generate_focus_immobilier_charts(data, output_dir, tmi=30, projection_duration=10, save_png=True, save_html=True):
    """G√©n√®re tous les graphiques de la page 'Focus Immobilier'.
    
    Args:
        data: Donn√©es charg√©es depuis le fichier JSON
        output_dir: R√©pertoire de sortie pour les graphiques
        tmi: Taux Marginal d'Imposition en % (d√©faut: 30)
        projection_duration: Dur√©e de projection en ann√©es (d√©faut: 10)
        save_png: Sauvegarder en format PNG
        save_html: Sauvegarder en format HTML
    """
    print("\nüè† G√©n√©ration des graphiques Focus Immobilier...")
    
    # R√©cup√©ration des donn√©es
    actifs = data.get('actifs', [])
    passifs = data.get('passifs', [])
    
    # Filtrer les biens immobiliers
    productive_assets = [a for a in actifs if a.get('type') == "Immobilier productif"]
    non_productive_assets = [a for a in actifs if a.get('type') == "Immobilier de jouissance"]
    
    if not productive_assets and not non_productive_assets:
        print("‚ö†Ô∏è  Aucun bien immobilier trouv√©.")
        return
    
    # Param√®tres par d√©faut (peuvent √™tre ajust√©s via les param√®tres de la fonction)
    social_tax = 17.2
    year_of_analysis = date.today().year
    
    print(f"üìã Trouv√© {len(productive_assets)} biens productifs et {len(non_productive_assets)} biens de jouissance")
    
    # --- Graphiques pour les biens productifs ---
    for i, asset in enumerate(productive_assets):
        asset_name = asset.get('libelle', f'Bien_productif_{i+1}')
        print(f"üìä G√©n√©ration des graphiques pour : {asset_name}")
        
        # V√©rifier que les donn√©es n√©cessaires sont pr√©sentes
        if asset.get('loyers_mensuels') is None:
            print(f"‚ö†Ô∏è  Donn√©es de loyers manquantes pour {asset_name}")
            continue
            
        # Calculer les m√©triques
        try:
            metrics = calculate_property_metrics(asset, passifs, tmi, social_tax, year_of_analysis)
            
            # 1. Graphique en cascade cash-flow
            is_lmnp = asset.get('mode_exploitation') == 'Location Meubl√©e'
            fig_waterfall = create_waterfall_fig(metrics, year_of_analysis, is_lmnp=is_lmnp)
            filename = f"immobilier_{i+1}_{asset_name.replace(' ', '_')}_waterfall_{year_of_analysis}"
            save_chart(fig_waterfall, filename, output_dir, save_png, save_html)
            
            # 2. Graphiques de projection
            loans = find_associated_loans(asset.get('id'), passifs)
            df_projection = generate_projection_data(asset, loans, tmi, social_tax, projection_duration)
            
            if not df_projection.empty:
                # 2a. Projection cash-flow
                fig_cash_flow = create_cash_flow_projection_fig(df_projection)
                filename = f"immobilier_{i+1}_{asset_name.replace(' ', '_')}_cash_flow_projection"
                save_chart(fig_cash_flow, filename, output_dir, save_png, save_html)
                
                # 2b. Projection effet de levier
                fig_leverage = create_leverage_projection_fig(df_projection)
                filename = f"immobilier_{i+1}_{asset_name.replace(' ', '_')}_leverage_projection"
                save_chart(fig_leverage, filename, output_dir, save_png, save_html)
                
                # 2c. Projection amortissement (seulement pour LMNP)
                if is_lmnp:
                    fig_amortissement = create_amortissement_projection_fig(df_projection)
                    filename = f"immobilier_{i+1}_{asset_name.replace(' ', '_')}_amortissement_projection"
                    save_chart(fig_amortissement, filename, output_dir, save_png, save_html)
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration des graphiques pour {asset_name}: {e}")
    
    # --- Graphiques pour les biens de jouissance ---
    for i, asset in enumerate(non_productive_assets):
        asset_name = asset.get('libelle', f'Bien_jouissance_{i+1}')
        print(f"üìä G√©n√©ration du graphique pour : {asset_name}")
        
        try:
            # Graphique en cascade pour le co√ªt de possession
            fig_non_productive = create_non_productive_waterfall_fig(asset, passifs, year_of_analysis)
            filename = f"immobilier_jouissance_{i+1}_{asset_name.replace(' ', '_')}_waterfall_{year_of_analysis}"
            save_chart(fig_non_productive, filename, output_dir, save_png, save_html)
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du graphique pour {asset_name}: {e}")
    
    print(f"‚úÖ G√©n√©ration des graphiques Focus Immobilier termin√©e")


def main():
    """Fonction principale du script."""
    parser = argparse.ArgumentParser(
        description="G√©n√®re les graphiques de l'audit patrimonial √† partir d'un fichier JSON"
    )
    parser.add_argument(
        "json_file", 
        help="Chemin vers le fichier JSON contenant les donn√©es"
    )
    parser.add_argument(
        "--output", "-o",
        default="charts_output",
        help="R√©pertoire de sortie pour les graphiques (d√©faut: charts_output)"
    )
    parser.add_argument(
        "--no-png",
        action="store_true",
        help="Ne pas sauvegarder en format PNG"
    )
    parser.add_argument(
        "--no-html", 
        action="store_true",
        help="Ne pas sauvegarder en format HTML"
    )
    parser.add_argument(
        "--tmi",
        type=int,
        choices=[0, 11, 30, 41, 45],
        default=30,
        help="Taux Marginal d'Imposition en pourcentage (d√©faut: 30)"
    )
    parser.add_argument(
        "--projection-years",
        type=int,
        default=10,
        help="Dur√©e de projection en ann√©es pour les graphiques immobiliers (d√©faut: 10)"
    )
    
    args = parser.parse_args()
    
    # V√©rifications
    if not os.path.exists(args.json_file):
        print(f"‚ùå Fichier {args.json_file} introuvable.")
        sys.exit(1)
    
    # Configuration formats de sortie
    save_png = not args.no_png
    save_html = not args.no_html
    
    if not save_png and not save_html:
        print("‚ùå Au moins un format de sortie doit √™tre s√©lectionn√©.")
        sys.exit(1)
    
    print(f"üöÄ D√©but de la g√©n√©ration des graphiques...")
    print(f"üìÅ Fichier source: {args.json_file}")
    print(f"üìÅ R√©pertoire de sortie: {args.output}")
    print(f"üñºÔ∏è  Formats: {'PNG ' if save_png else ''}{'HTML' if save_html else ''}")
    print(f"üè¶ TMI: {args.tmi}%")
    print(f"üìÖ Projection: {args.projection_years} ans")
    
    # Chargement des donn√©es
    data = load_data_from_json(args.json_file)
    print(f"‚úÖ Donn√©es charg√©es avec succ√®s")
    
    # Cr√©ation du r√©pertoire de sortie
    output_dir = create_output_directory(args.output)
    
    # G√©n√©ration des graphiques
    try:
        # Graphiques du patrimoine
        generate_patrimoine_charts(data, output_dir, save_png, save_html)
        
        # Graphiques des flux
        generate_flux_charts(data, output_dir, save_png, save_html)
        
        # Graphiques Focus Immobilier
        generate_focus_immobilier_charts(data, output_dir, args.tmi, args.projection_years, save_png, save_html)
        
        print(f"\nüéâ G√©n√©ration termin√©e avec succ√®s !")
        print(f"üìÅ Tous les graphiques sont disponibles dans : {os.path.abspath(output_dir)}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration : {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()