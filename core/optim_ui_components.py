"""
Module des composants d'interface utilisateur pour le simulateur d'investissement
Contient toutes les fonctions d'affichage des tableaux, graphiques et √©l√©ments UI
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from typing import Dict, Any
from core.optim_calculations import calculer_donnees_tableau_actifs
from core.optim_simulation_financiere import formater_resultat_optimisation, creer_donnees_graphique_waterfall


def afficher_sidebar_parametres():
    """
    Affiche la sidebar avec les param√®tres de simulation.
    
    Returns:
        Dictionnaire avec les valeurs des param√®tres saisis
    """
    # Initialisation des valeurs par d√©faut dans session_state si n√©cessaire
    if 'optim_sidebar_params' not in st.session_state:
        st.session_state.optim_sidebar_params = {
            'effort_max': 1000.0,
            'mensualite_max': 600.0,
            'capital_initial_max': 50000.0,
            'plafond_per_annuel': st.session_state.optim_params.get('plafond_per_annuel', 27840.0)
        }
    
    with st.sidebar:
        st.header("üîß Param√®tres de simulation")
        
        # Param√®tres de contraintes
        st.subheader("Contraintes d'optimisation")
        
        #col1, col2 = st.columns(2)
        #with col1:
        effort_max = st.number_input(
            "√âpargne max",
            min_value=0.0,
            value=st.session_state.optim_sidebar_params['effort_max'],
            step=50.0,
            help="‚Ç¨/mois",
            key="optim_effort_max_input"
        )
    
        #with col2:
        mensualite_max = st.number_input(
            "Cr√©dit SCPI max",
            min_value=0.0,
            value=st.session_state.optim_sidebar_params['mensualite_max'],
            step=50.0,
            help="‚Ç¨/mois",
            key="optim_mensualite_max_input"
        )
    
        capital_initial_max = st.number_input(
            "Capital initial max (‚Ç¨)",
            min_value=0.0,
            value=st.session_state.optim_sidebar_params['capital_initial_max'],
            step=1000.0,
            key="optim_capital_initial_max_input"
        )
                
        plafond_per_annuel = st.number_input(
            "Plafond PER annuel (‚Ç¨)",
            min_value=0.0,
            value=st.session_state.optim_sidebar_params['plafond_per_annuel'],
            step=100.0,
            key="optim_plafond_per_annuel_input"
        )
        
        # Sauvegarde des valeurs dans session_state
        st.session_state.optim_sidebar_params.update({
            'effort_max': effort_max,
            'mensualite_max': mensualite_max,
            'capital_initial_max': capital_initial_max,
            'plafond_per_annuel': plafond_per_annuel
        })
    
    return {
        'effort_max': effort_max,
        'mensualite_max': mensualite_max,
        'capital_initial_max': capital_initial_max,
        'plafond_per_annuel': plafond_per_annuel
    }


def afficher_variables_optimisation():
    """
    Affiche l'interface des variables d'optimisation.
    
    Returns:
        Dictionnaire avec l'√©tat des variables d'optimisation
    """
    st.header("üéØ Variables d'optimisation")
    st.markdown("Configurez les param√®tres √† optimiser. Cochez pour activer l'optimisation, d√©cochez pour fixer une valeur.")
    
    # S√©lection des actifs √† utiliser
    st.subheader("üìà S√©lection des actifs")
    
    # Options d'actifs disponibles
    actifs_disponibles = {
        'Assurance Vie': {'emoji': 'üí∞', 'nom': 'Assurance Vie'},
        'PER': {'emoji': 'üèõÔ∏è', 'nom': 'PER'},
        'SCPI': {'emoji': 'üè¢', 'nom': 'SCPI'}
    }
    
    # Multiselect pour choisir les actifs
    actifs_selectionnes = st.multiselect(
        "Choisissez les actifs √† inclure dans l'optimisation :",
        options=list(actifs_disponibles.keys()),
        default=['Assurance Vie', 'PER', 'SCPI'],
        format_func=lambda x: f"{actifs_disponibles[x]['emoji']} {actifs_disponibles[x]['nom']}"
    )
    
    if not actifs_selectionnes:
        st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins un actif pour l'optimisation.")
        return {}
    
    st.markdown("---")
    
    # CSS pour limiter la largeur du tableau d'optimisation
    st.markdown("""
    <style>
    .optimization-table {
        max-width: 75%;
        margin: 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    variables_info = {}
    
    # Configuration compl√®te des actifs
    tous_actifs_config = {
        'Assurance Vie': {
            'nom': 'Assurance Vie',
            'emoji': 'üí∞',
            'capital_key': 'capital_av',
            'versement_key': 'versement_av',
            'capital_default': True,
            'versement_default': True
        },
        'PER': {
            'nom': 'PER',
            'emoji': 'üèõÔ∏è',
            'capital_key': 'capital_per',
            'versement_key': 'versement_per',
            'capital_default': False,
            'versement_default': True
        },
        'SCPI': {
            'nom': 'SCPI',
            'emoji': 'üè¢',
            'capital_key': 'capital_scpi',
            'versement_key': 'versement_scpi',
            'capital_default': True,
            'versement_default': False
        }
    }
    
    # Filtrage des actifs selon la s√©lection
    actifs_config = [tous_actifs_config[actif] for actif in actifs_selectionnes]
    
    # En-t√™tes du tableau optimis√©s
    col_actif, col_capital, col_versement = st.columns([0.8, 2.0, 2.0])
    
    with col_actif:
        st.markdown("**Actif**")
    with col_capital:
        st.markdown("**Capital Initial**")
    with col_versement:
        st.markdown("**Versements Mensuels**")
    
    # Affichage pour chaque actif
    for actif in actifs_config:
        col_actif, col_capital, col_versement = st.columns([0.8, 2.0, 2.0])
        
        with col_actif:
                st.markdown(f"**{actif['emoji']} {actif['nom']}**")
        
        with col_capital:
            # Layout horizontal : checkbox + valeur sur la m√™me ligne
            col_check_cap, col_val_cap, col_dummy_cap = st.columns([1, 3, 2])
            
            with col_check_cap:
                activer_capital = st.checkbox(
                    "Opt.",
                    key=f"activer_{actif['capital_key']}",
                    value=st.session_state.optim_activer_vars.get(actif['capital_key'], actif['capital_default'])
                )
            
            with col_val_cap:
                if activer_capital:
                    capital_value = st.session_state.optim_current_values[actif['capital_key']]
                    st.markdown(f"**{capital_value:,.0f} ‚Ç¨**")
                else:
                    # Colonne plus √©troite pour l'input
                    col_input = st.columns([1, 1])[0]
                    with col_input:
                        capital_value = st.number_input(
                            f"‚Ç¨",
                            min_value=0.0,
                            value=st.session_state.optim_current_values[actif['capital_key']],
                            step=1000.0,
                            key=f"{actif['capital_key']}_fixe",
                            label_visibility="collapsed",
                            format="%.0f"
                        )
                        st.session_state.optim_current_values[actif['capital_key']] = capital_value
            
            variables_info[actif['capital_key']] = {'activer': activer_capital, 'valeur': capital_value}
        
        with col_versement:
            # Layout horizontal : checkbox + valeur sur la m√™me ligne
            col_check_vers, col_val_vers, col_dummy_vers = st.columns([1, 3, 2])
            
            with col_check_vers:
                activer_versement = st.checkbox(
                    "Opt.",
                    key=f"activer_{actif['versement_key']}",
                    value=st.session_state.optim_activer_vars.get(actif['versement_key'], actif['versement_default'])
                )
            
            with col_val_vers:
                if activer_versement:
                    versement_value = st.session_state.optim_current_values[actif['versement_key']]
                    st.markdown(f"**{versement_value:,.0f} ‚Ç¨**")
                else:
                    # Colonne plus √©troite pour l'input
                    col_input = st.columns([1, 1])[0]
                    with col_input:
                        versement_value = st.number_input(
                            f"‚Ç¨",
                            min_value=0.0,
                            value=st.session_state.optim_current_values[actif['versement_key']],
                            step=50.0,
                            key=f"{actif['versement_key']}_fixe",
                            label_visibility="collapsed",
                            format="%.0f"
                        )
                        st.session_state.optim_current_values[actif['versement_key']] = versement_value
            
            variables_info[actif['versement_key']] = {'activer': activer_versement, 'valeur': versement_value}
    
    # Section cr√©dit SCPI (seulement si SCPI s√©lectionn√©e)
    if 'SCPI' in actifs_selectionnes:
        col_label, col_credit, col_empty = st.columns([0.8, 2.0, 2.0])
        
        with col_label:
            st.markdown("**üè¶ Cr√©dit SCPI**")
        
        with col_credit:
            # Layout horizontal : checkbox + valeur sur la m√™me ligne
            col_check_credit, col_val_credit = st.columns([1, 3])
            
            with col_check_credit:
                activer_credit_scpi = st.checkbox(
                    "Opt.",
                    key="activer_credit_scpi_montant",
                    value=st.session_state.optim_activer_vars.get('credit_scpi_montant', True)
                )
            
            with col_val_credit:
                if activer_credit_scpi:
                    credit_scpi_montant = st.session_state.optim_current_values['credit_scpi_montant']
                    st.markdown(f"**{credit_scpi_montant:,.0f} ‚Ç¨**")
                else:
                    # Colonne plus √©troite pour l'input
                    col_input = st.columns([1, 1])[0]
                    with col_input:
                        credit_scpi_montant = st.number_input(
                            "‚Ç¨",
                            min_value=0.0,
                            value=st.session_state.optim_current_values['credit_scpi_montant'],
                            step=5000.0,
                            key="credit_scpi_montant_fixe",
                            label_visibility="collapsed",
                            format="%.0f"
                        )
                        st.session_state.optim_current_values['credit_scpi_montant'] = credit_scpi_montant
        
        variables_info['credit_scpi_montant'] = {'activer': activer_credit_scpi, 'valeur': credit_scpi_montant}
    else:
        # Si SCPI n'est pas s√©lectionn√©e, d√©sactiver le cr√©dit SCPI
        variables_info['credit_scpi_montant'] = {'activer': False, 'valeur': 0.0}
    
    return variables_info


def afficher_metriques_principales(resultat_optimisation: Dict[str, Any]):
    """
    Affiche les m√©triques principales des r√©sultats d'optimisation.
    
    Args:
        resultat_optimisation: R√©sultats de l'optimisation
    """
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="üí∞ Solde final optimal",
            value=f"{resultat_optimisation['solde_final_opt']:,.2f} ‚Ç¨"
        )
    
    with col2:
        st.metric(
            label="üí∏ Effort d'√©pargne maximal",
            value=f"{resultat_optimisation['max_effort_opt']:.2f} ‚Ç¨/mois"
        )
    
    with col3:
        statut_color = "üü¢" if resultat_optimisation['success'] else "üî¥"
        contraintes_color = "üü¢" if resultat_optimisation['contraintes_satisfaites'] else "üü†"
        st.write(f"**Statut:** {statut_color} {'R√©ussi' if resultat_optimisation['success'] else '√âchec'}")
        st.write(f"**Contraintes:** {contraintes_color} {'OK' if resultat_optimisation['contraintes_satisfaites'] else 'Attention'}")


def afficher_messages_contraintes(resultat_optimisation: Dict[str, Any]):
    """
    Affiche les messages de contraintes s'il y en a.
    
    Args:
        resultat_optimisation: R√©sultats de l'optimisation
    """
    if resultat_optimisation['messages_contraintes']:
        st.warning("‚ö†Ô∏è **Messages de contraintes:**")
        for message in resultat_optimisation['messages_contraintes']:
            st.write(f"‚Ä¢ {message}")


def afficher_tableau_resultats_actifs(resultat_optimisation: Dict[str, Any], params: Dict[str, Any]):
    """
    Affiche le tableau des r√©sultats par actif.
    
    Args:
        resultat_optimisation: R√©sultats de l'optimisation
        params: Param√®tres de simulation
    """
    st.subheader("üìã R√©sum√© des r√©sultats par actif")
    
    # Calcul de toutes les donn√©es n√©cessaires
    donnees = calculer_donnees_tableau_actifs(resultat_optimisation, params)
    
    # Cr√©ation du DataFrame
    df_resultats_actifs = pd.DataFrame({
        'Actif': ['Assurance Vie', 'PER', 'SCPI'],
        'Capital initial (‚Ç¨)': [
            f"{donnees['capital_av']:,.0f}",
            f"{donnees['capital_per']:,.0f}",
            f"{donnees['capital_scpi']:,.0f}"
        ],
        'Versement mensuel (‚Ç¨)': [
            f"{donnees['versement_av']:,.0f}",
            f"{donnees['versement_per']:,.0f}",
            f"{donnees['versement_scpi']:,.0f}"
        ],
        'Mensualit√© cr√©dit (‚Ç¨)': [
            "0",
            "0",
            f"{donnees['mensualite_credit_scpi']:,.0f}" if donnees['credit_scpi_montant'] > 0 else "0"
        ],
        'Loyer mensuel net (‚Ç¨)': [
            f"{donnees['loyer_av']:,.0f}",
            f"{donnees['loyer_per']:,.0f}",
            f"{donnees['loyer_scpi']:,.0f}"
        ],
        'Impact fiscal mensuel (‚Ç¨)': [
            f"{donnees['impact_fiscal_av']:,.0f}" if donnees['impact_fiscal_av'] == 0 else f"{donnees['impact_fiscal_av']:+,.0f}",
            f"{donnees['impact_fiscal_per']:+,.0f}" if donnees['impact_fiscal_per'] != 0 else "0",
            f"{donnees['impact_fiscal_scpi']:+,.0f}" if donnees['impact_fiscal_scpi'] != 0 else "0"
        ],
        'Effort d\'√©pargne mensuel (‚Ç¨)': [
            f"{donnees['effort_epargne_av']:,.0f}",
            f"{donnees['effort_epargne_per']:,.0f}",
            f"{donnees['effort_epargne_scpi']:,.0f}"
        ]
    })
    
    st.dataframe(df_resultats_actifs, use_container_width=True)
    
    # L√©gende
    st.markdown("""
    **üí° Lecture du tableau :**
    - **Mensualit√© cr√©dit** : Remboursement mensuel du cr√©dit (capital + int√©r√™ts + assurance)
    - **Impact fiscal** : Valeur n√©gative (-) = √âconomie d'imp√¥ts | Valeur positive (+) = Imp√¥ts √† payer | 0 = Neutre
    - **Effort d'√©pargne** : Flux de tr√©sorerie net mensuel (sortie d'argent r√©elle)
    """)
    
    return donnees


def afficher_details_complementaires(donnees: Dict[str, Any], params: Dict[str, Any]):
    """
    Affiche les d√©tails compl√©mentaires pour SCPI et PER.
    
    Args:
        donnees: Donn√©es calcul√©es par calculer_donnees_tableau_actifs
        params: Param√®tres de simulation
    """
    # D√©tails SCPI √† cr√©dit
    if donnees['credit_scpi_montant'] > 0:
        st.write(f"**üí° SCPI √† cr√©dit :** {donnees['credit_scpi_montant']:,.0f} ‚Ç¨ - Mensualit√© : {donnees['mensualite_credit_scpi']:,.0f} ‚Ç¨/mois")
    
    # D√©tails PER
    if donnees['versement_per'] > 0:
        economie_annuelle_per = donnees['economie_impots_per'] * 12
        st.write(f"**üí° PER :** √âconomie fiscale {economie_annuelle_per:,.0f} ‚Ç¨/an (TMI {params['tmi']*100:.0f}%)")
    
    # Impact fiscal total
    if donnees['impact_fiscal_total'] != 0:
        st.write(f"**üìä Impact fiscal :** {donnees['impact_fiscal_total']:+,.0f} ‚Ç¨/mois ({donnees['impact_fiscal_total'] * 12:+,.0f} ‚Ç¨/an)")
    else:
        st.write("**üìä Impact fiscal :** neutre")


def afficher_graphique_waterfall(resultat_optimisation: Dict[str, Any]):
    """
    Affiche le graphique waterfall de d√©composition de l'effort d'√©pargne.
    
    Args:
        resultat_optimisation: R√©sultats de l'optimisation
    """
    st.subheader("üìä D√©composition de l'effort d'√©pargne mensuel")
    donnees_waterfall = creer_donnees_graphique_waterfall(resultat_optimisation)
    
    fig_waterfall = go.Figure(data=[go.Waterfall(
        x=donnees_waterfall['labels'],
        y=donnees_waterfall['values'],
        text=donnees_waterfall['text'],
        measure=donnees_waterfall['measure'],
        connector={"line": {"color": "rgb(63, 63, 63)"}},
        increasing={"marker": {"color": "lightgreen"}},
        decreasing={"marker": {"color": "lightcoral"}},
        totals={"marker": {"color": "lightblue"}}
    )])
    
    fig_waterfall.update_layout(
        title="D√©composition de l'effort d'√©pargne mensuel maximal",
        xaxis_title="Composantes",
        yaxis_title="Montant (‚Ç¨)",
        showlegend=False,
        height=500,
        xaxis={'tickangle': -45}
    )
    
    st.plotly_chart(fig_waterfall, use_container_width=True)
    
    # Explication du graphique waterfall
    with st.expander("‚ÑπÔ∏è Comment lire ce graphique", expanded=False):
        st.markdown("""
        **Le graphique waterfall montre comment se compose l'effort d'√©pargne mensuel :**
        
        - üî¥ **Barres rouges (n√©gatives)** : Sorties de tr√©sorerie
          - Versements mensuels (AV, PER, SCPI)
          - Imp√¥ts sur les revenus SCPI  
          - Mensualit√© du cr√©dit SCPI
          
        - üü¢ **Barres vertes (positives)** : Entr√©es de tr√©sorerie
          - √âconomies d'imp√¥t gr√¢ce au PER
          - Revenus bruts des SCPI
          
        - üîµ **Barre bleue finale** : Effort d'√©pargne net total
        
        L'objectif de l'optimisation est de maximiser le patrimoine final tout en respectant 
        la contrainte d'effort d'√©pargne mensuel que vous avez fix√©e.
        """)


def afficher_detail_complet_parametres(resultat_optimisation: Dict[str, Any]):
    """
    Affiche le d√©tail complet des param√®tres optimaux dans un expander.
    
    Args:
        resultat_optimisation: R√©sultats de l'optimisation
    """
    with st.expander("üìä D√©tail complet des param√®tres optimaux", expanded=False):
        resultats_formates = formater_resultat_optimisation(resultat_optimisation)
        df_resultats_complet = pd.DataFrame([
            {"Param√®tre": k, "Valeur optimale": v} 
            for k, v in resultats_formates.items()
        ])
        st.dataframe(df_resultats_complet, use_container_width=True)


def afficher_simulation_detaillee(resultat_optimisation: Dict[str, Any]):
    """
    Affiche les r√©sultats d√©taill√©s de la simulation pour les param√®tres optimaux.
    
    Args:
        resultat_optimisation: R√©sultats de l'optimisation contenant les param√®tres optimaux
    """
    if 'x' not in resultat_optimisation:
        st.error("‚ùå Aucun r√©sultat d'optimisation disponible")
        return
    
    with st.expander("üìà Simulation d√©taill√©e avec param√®tres optimaux", expanded=False):
        # Import de la fonction de simulation
        from core.optim_simulation_financiere import calculer_simulation_mensuelle
        
        # R√©cup√©ration des param√®tres optimaux
        x_optimal = resultat_optimisation['x']
        
        # Construction des param√®tres pour la simulation
        capital_av = x_optimal[0] if len(x_optimal) > 0 else 0
        capital_per = x_optimal[1] if len(x_optimal) > 1 else 0
        capital_scpi = x_optimal[2] if len(x_optimal) > 2 else 0
        versement_av = x_optimal[3] if len(x_optimal) > 3 else 0
        versement_per = x_optimal[4] if len(x_optimal) > 4 else 0
        versement_scpi = x_optimal[5] if len(x_optimal) > 5 else 0
        credit_scpi_montant = x_optimal[6] if len(x_optimal) > 6 else 0
        
        # Param√®tres du session state
        params = st.session_state.optim_params
        
        try:
            # Ex√©cution de la simulation
            resultats_simulation = calculer_simulation_mensuelle(
                capital_av=capital_av,
                capital_per=capital_per,
                capital_scpi=capital_scpi,
                versement_av=versement_av,
                versement_per=versement_per,
                versement_scpi=versement_scpi,
                taux_av=params.get('taux_av', 0.04),
                taux_per=params.get('taux_per', 0.05),
                taux_distribution_scpi=params.get('taux_distribution_scpi', 0.045),
                taux_appreciation_scpi=params.get('taux_appreciation_scpi', 0.02),
                frais_entree_av=params.get('frais_entree_av', 0.03),
                frais_entree_per=params.get('frais_entree_per', 0.025),
                frais_entree_scpi=params.get('frais_entree_scpi', 0.10),
                tmi=params.get('tmi', 0.30),
                plafond_per_annuel=params.get('plafond_per_annuel', 35000),
                duree_annees=params.get('duree_annees', 20),
                credit_scpi_montant=credit_scpi_montant,
                credit_scpi_duree=params.get('credit_scpi_duree', 15),
                credit_scpi_taux=params.get('credit_scpi_taux', 0.035),
                credit_scpi_assurance=params.get('credit_scpi_assurance', 0.003),
                scpi_europeenne_ratio=params.get('scpi_europeenne_ratio', 0.0)
            )
            
            # Conversion en DataFrame
            df_simulation = pd.DataFrame(resultats_simulation)
            
            # Formatage des colonnes mon√©taires
            colonnes_monetaires = [
                'versement_av', 'versement_per', 'versement_scpi',
                'solde_av', 'solde_per', 'solde_scpi', 'solde_total',
                'revenus_av', 'revenus_per', 'revenus_scpi',
                'economie_impots_per', 'fiscalite_payee',
                'mensualite_credit_scpi', 'capital_restant_du'
            ]
            
            # Information sur la simulation
            st.markdown("### üìä Informations g√©n√©rales")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Dur√©e", f"{len(df_simulation)} mois")
            with col2:
                st.metric("Solde final total", f"{df_simulation['solde_total'].iloc[-1]:,.0f} ‚Ç¨")
            with col3:
                effort_total = df_simulation['effort_epargne'].sum()
                st.metric("Effort total", f"{effort_total:,.0f} ‚Ç¨")
            with col4:
                performance = df_simulation['solde_total'].iloc[-1] / effort_total if effort_total > 0 else 0
                st.metric("Multiple", f"{performance:.2f}x")
            
            # Choix de l'affichage
            mode_affichage = st.radio(
                "Mode d'affichage :",
                ["üìÖ Donn√©es mensuelles", "üóìÔ∏è Donn√©es annuelles", "üéØ R√©sum√© final"],
                horizontal=True
            )
            
            if mode_affichage == "üìÖ Donn√©es mensuelles":
                # Affichage mensuel complet
                st.markdown("### üìÖ √âvolution mensuelle compl√®te")
                
                # Formatage du DataFrame pour l'affichage
                df_affichage = df_simulation.copy()
                
                # Formatage des colonnes mon√©taires
                for col in colonnes_monetaires:
                    if col in df_affichage.columns:
                        df_affichage[col] = df_affichage[col].apply(lambda x: f"{x:,.0f} ‚Ç¨")
                
                # Renommage des colonnes pour un affichage plus clair
                colonnes_renommees = {
                    'mois': 'Mois',
                    'versement_av': 'Versement AV',
                    'versement_per': 'Versement PER',
                    'versement_scpi': 'Versement SCPI',
                    'solde_av': 'Solde AV',
                    'solde_per': 'Solde PER',
                    'solde_scpi': 'Solde SCPI',
                    'solde_total': 'Solde Total',
                    'effort_epargne': 'Effort √âpargne',
                    'economie_impots_per': '√âconomie Imp√¥ts PER',
                    'fiscalite_payee': 'Fiscalit√© Pay√©e',
                    'mensualite_credit_scpi': 'Mensualit√© Cr√©dit',
                    'capital_restant_du': 'Capital Restant D√ª'
                }
                
                df_affichage = df_affichage.rename(columns=colonnes_renommees)
                
                st.dataframe(df_affichage, use_container_width=True, height=400)
                
            elif mode_affichage == "üóìÔ∏è Donn√©es annuelles":
                # Agr√©gation annuelle
                st.markdown("### üóìÔ∏è √âvolution annuelle")
                
                # Cr√©ation du DataFrame annuel
                df_simulation['annee'] = ((df_simulation['mois'] - 1) // 12) + 1
                
                df_annuel = df_simulation.groupby('annee').agg({
                    'versement_av': 'sum',
                    'versement_per': 'sum', 
                    'versement_scpi': 'sum',
                    'solde_av': 'last',
                    'solde_per': 'last',
                    'solde_scpi': 'last',
                    'solde_total': 'last',
                    'effort_epargne': 'sum',
                    'economie_impots_per': 'sum',
                    'fiscalite_payee': 'sum'
                }).reset_index()
                
                # Formatage pour l'affichage
                df_annuel_affichage = df_annuel.copy()
                for col in ['versement_av', 'versement_per', 'versement_scpi', 'solde_av', 
                           'solde_per', 'solde_scpi', 'solde_total', 'effort_epargne',
                           'economie_impots_per', 'fiscalite_payee']:
                    if col in df_annuel_affichage.columns:
                        df_annuel_affichage[col] = df_annuel_affichage[col].apply(lambda x: f"{x:,.0f} ‚Ç¨")
                
                # Renommage des colonnes
                colonnes_renommees_annuel = {
                    'annee': 'Ann√©e',
                    'versement_av': 'Versements AV',
                    'versement_per': 'Versements PER',
                    'versement_scpi': 'Versements SCPI',
                    'solde_av': 'Solde AV fin',
                    'solde_per': 'Solde PER fin',
                    'solde_scpi': 'Solde SCPI fin',
                    'solde_total': 'Solde Total fin',
                    'effort_epargne': 'Effort Annuel',
                    'economie_impots_per': '√âconomie Imp√¥ts',
                    'fiscalite_payee': 'Fiscalit√© Pay√©e'
                }
                
                df_annuel_affichage = df_annuel_affichage.rename(columns=colonnes_renommees_annuel)
                
                st.dataframe(df_annuel_affichage, use_container_width=True)
                
            else:  # R√©sum√© final
                st.markdown("### üéØ R√©sum√© des r√©sultats finaux")
                
                # Calculs de synth√®se
                solde_final_av = df_simulation['solde_av'].iloc[-1]
                solde_final_per = df_simulation['solde_per'].iloc[-1]
                solde_final_scpi = df_simulation['solde_scpi'].iloc[-1]
                solde_final_total = df_simulation['solde_total'].iloc[-1]
                
                effort_total = df_simulation['effort_epargne'].sum()
                economie_impots_total = df_simulation['economie_impots_per'].sum()
                fiscalite_total = df_simulation['fiscalite_payee'].sum()
                
                # Affichage en colonnes
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**üí∞ Soldes finaux :**")
                    st.write(f"‚Ä¢ Assurance Vie : {solde_final_av:,.0f} ‚Ç¨")
                    st.write(f"‚Ä¢ PER : {solde_final_per:,.0f} ‚Ç¨")
                    st.write(f"‚Ä¢ SCPI : {solde_final_scpi:,.0f} ‚Ç¨")
                    st.write(f"‚Ä¢ **Total : {solde_final_total:,.0f} ‚Ç¨**")
                
                with col2:
                    st.markdown("**üìä Synth√®se financi√®re :**")
                    st.write(f"‚Ä¢ Effort d'√©pargne total : {effort_total:,.0f} ‚Ç¨")
                    st.write(f"‚Ä¢ √âconomie d'imp√¥ts PER : {economie_impots_total:,.0f} ‚Ç¨")
                    st.write(f"‚Ä¢ Fiscalit√© pay√©e : {fiscalite_total:,.0f} ‚Ç¨")
                    gain_net = solde_final_total - effort_total
                    st.write(f"‚Ä¢ **Gain net : {gain_net:,.0f} ‚Ç¨**")
        
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la simulation : {str(e)}")


def afficher_parametres_avances():
    """
    Affiche l'interface des param√®tres avanc√©s de simulation.
    
    Returns:
        Dict: Param√®tres mis √† jour
    """
    with st.expander("‚öôÔ∏è Param√®tres avanc√©s de simulation", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìÖ Dur√©es")
            duree_annees = st.number_input(
                "Dur√©e de simulation (ann√©es)",
                min_value=1.0,
                max_value=50.0,
                value=st.session_state.optim_params.get('duree_annees', 20.0),
                step=1.0
            )
            
            credit_scpi_duree = st.number_input(
                "Dur√©e cr√©dit SCPI (ann√©es)",
                min_value=1.0,
                max_value=30.0,
                value=st.session_state.optim_params.get('credit_scpi_duree', 15.0),
                step=1.0
            )
            
            st.subheader("üìà Taux de rendement (%)")
            taux_av = st.number_input(
                "Taux AV annuel",
                min_value=0.0,
                max_value=20.0,
                value=st.session_state.optim_params.get('taux_av', 0.04) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            taux_per = st.number_input(
                "Taux PER annuel",
                min_value=0.0,
                max_value=20.0,
                value=st.session_state.optim_params.get('taux_per', 0.05) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            taux_distribution_scpi = st.number_input(
                "Taux distribution SCPI annuel",
                min_value=0.0,
                max_value=15.0,
                value=st.session_state.optim_params.get('taux_distribution_scpi', 0.045) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            taux_appreciation_scpi = st.number_input(
                "Taux appr√©ciation SCPI annuel",
                min_value=0.0,
                max_value=10.0,
                value=st.session_state.optim_params.get('taux_appreciation_scpi', 0.02) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
        
        with col2:
            st.subheader("üí∞ Frais d'entr√©e (%)")
            frais_entree_av = st.number_input(
                "Frais d'entr√©e AV",
                min_value=0.0,
                max_value=10.0,
                value=st.session_state.optim_params.get('frais_entree_av', 0.03) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            frais_entree_per = st.number_input(
                "Frais d'entr√©e PER",
                min_value=0.0,
                max_value=10.0,
                value=st.session_state.optim_params.get('frais_entree_per', 0.025) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            frais_entree_scpi = st.number_input(
                "Frais d'entr√©e SCPI",
                min_value=0.0,
                max_value=20.0,
                value=st.session_state.optim_params.get('frais_entree_scpi', 0.10) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            st.subheader("üè¶ Cr√©dit SCPI (%)")
            credit_scpi_taux = st.number_input(
                "Taux cr√©dit SCPI annuel",
                min_value=0.0,
                max_value=10.0,
                value=st.session_state.optim_params.get('credit_scpi_taux', 0.035) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            credit_scpi_assurance = st.number_input(
                "Assurance cr√©dit SCPI annuelle",
                min_value=0.0,
                max_value=2.0,
                value=st.session_state.optim_params.get('credit_scpi_assurance', 0.003) * 100,
                step=0.1,
                format="%.2f"
            ) / 100
            
            st.subheader("üìä Fiscalit√© (%)")
            tmi = st.number_input(
                "Tranche marginale d'imposition",
                min_value=0.0,
                max_value=50.0,
                value=st.session_state.optim_params.get('tmi', 0.30) * 100,
                step=1.0,
                format="%.1f"
            ) / 100
            
            plafond_per_annuel = st.number_input(
                "Plafond PER annuel (‚Ç¨)",
                min_value=0.0,
                max_value=100000.0,
                value=st.session_state.optim_params.get('plafond_per_annuel', 35000.0),
                step=1000.0
            )
            
            scpi_europeenne_ratio = st.number_input(
                "Ratio SCPI europ√©ennes (sans PS)",
                min_value=0.0,
                max_value=100.0,
                value=st.session_state.optim_params.get('scpi_europeenne_ratio', 0.0) * 100,
                step=5.0,
                format="%.1f"
            ) / 100
        
        # Mise √† jour des param√®tres dans le session state
        parametres_mis_a_jour = {
            'duree_annees': duree_annees,
            'credit_scpi_duree': credit_scpi_duree,
            'taux_av': taux_av,
            'taux_per': taux_per,
            'taux_distribution_scpi': taux_distribution_scpi,
            'taux_appreciation_scpi': taux_appreciation_scpi,
            'frais_entree_av': frais_entree_av,
            'frais_entree_per': frais_entree_per,
            'frais_entree_scpi': frais_entree_scpi,
            'credit_scpi_taux': credit_scpi_taux,
            'credit_scpi_assurance': credit_scpi_assurance,
            'tmi': tmi,
            'plafond_per_annuel': plafond_per_annuel,
            'scpi_europeenne_ratio': scpi_europeenne_ratio
        }
        
        st.session_state.optim_params.update(parametres_mis_a_jour)
        
        return parametres_mis_a_jour