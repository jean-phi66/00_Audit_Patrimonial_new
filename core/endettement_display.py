"""
Module pour l'affichage des fonctions de capacit√© d'endettement.

Ce module contient toutes les fonctions d'interface utilisateur (UI) pour la page
Capacit√© d'Endettement, utilisant Streamlit pour l'affichage des r√©sultats et
des graphiques.
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from core.endettement_charts import (
    calculate_endettement_metrics,
    create_debt_gauge_chart,
    create_debt_breakdown_chart,
    RENTAL_INCOME_WEIGHT
)
from core.patrimoine_logic import calculate_loan_principal

def display_results(weighted_income, current_debt, max_debt_ratio_pct):
    """
    Affiche les r√©sultats du calcul de capacit√© d'endettement.
    
    Args:
        weighted_income (float): Revenus pond√©r√©s mensuels
        current_debt (float): Charges de pr√™ts actuelles mensuelles
        max_debt_ratio_pct (float): Taux d'endettement maximum autoris√© (%)
        
    Returns:
        float: Capacit√© d'emprunt restante mensuelle
    """
    st.subheader("üìä R√©sultats")
    
    if weighted_income == 0:
        st.warning("Les revenus pond√©r√©s sont de 0. Impossible de calculer le taux d'endettement.")
        return

    # Calculs
    max_debt_service = weighted_income * (max_debt_ratio_pct / 100)
    current_debt_ratio_pct = (current_debt / weighted_income) * 100 if weighted_income > 0 else 0
    remaining_capacity = max(0, max_debt_service - current_debt)

    # Affichage en deux colonnes principales
    results_col1, results_col2 = st.columns([1, 1])

    with results_col1:
        st.markdown("##### üìà Indicateurs Cl√©s")
        # KPI en 2x2 + 1
        kpi_col1, kpi_col2 = st.columns(2)
        kpi_col1.metric("Revenus Pond√©r√©s", f"{weighted_income:,.0f} ‚Ç¨/mois")
        kpi_col2.metric("Mensualit√© Maximum", f"{max_debt_service:,.0f} ‚Ç¨/mois")

        kpi_col3, kpi_col4 = st.columns(2)
        kpi_col3.metric("Charges de Pr√™ts", f"{current_debt:,.0f} ‚Ç¨/mois")
        kpi_col4.metric(
            "Taux d'Endettement Actuel",
            f"{current_debt_ratio_pct:.2f} %",
            delta=f"{current_debt_ratio_pct - max_debt_ratio_pct:.2f} % pts",
            delta_color="inverse"
        )
        
        # KPI capacit√© restante sur toute la largeur
        st.metric("Capacit√© d'Emprunt Restante", f"{remaining_capacity:,.0f} ‚Ç¨/mois")

    with results_col2:
        # Jauge de visualisation (sans titre suppl√©mentaire)
        metrics_data = calculate_endettement_metrics([], [], max_debt_ratio_pct)
        metrics_data.update({
            'weighted_income': weighted_income,
            'current_debt': current_debt,
            'current_debt_ratio_pct': current_debt_ratio_pct,
            'max_debt_ratio_pct': max_debt_ratio_pct
        })
        fig = create_debt_gauge_chart(metrics_data)
        # Supprimer le titre du graphique pour √©viter la superposition
        fig.update_layout(
            title="",  # Supprime le titre du graphique
            height=350, 
            margin=dict(t=20, b=20, l=20, r=20)
        )
        st.plotly_chart(fig, use_container_width=True)

    return remaining_capacity

def display_debt_ratio_breakdown_chart(debt_details, weighted_income, max_debt_ratio_pct):
    """
    Affiche un graphique de la r√©partition du taux d'endettement par pr√™t.
    
    Args:
        debt_details (list): Liste des d√©tails des pr√™ts
        weighted_income (float): Revenus pond√©r√©s mensuels
        max_debt_ratio_pct (float): Taux d'endettement maximum autoris√© (%)
    """
    st.subheader("R√©partition du Taux d'Endettement par Pr√™t")
    
    if not debt_details:
        st.info("Aucun pr√™t en cours √† afficher.")
        return
    
    if weighted_income == 0:
        st.warning("Revenus pond√©r√©s nuls, impossible de calculer la r√©partition.")
        return

    # Utiliser la fonction centralis√©e
    metrics_data = {
        'debt_details': debt_details,
        'weighted_income': weighted_income,
        'max_debt_ratio_pct': max_debt_ratio_pct
    }
    fig = create_debt_breakdown_chart(metrics_data)
    fig.update_layout(height=300)  # Ajuster la hauteur pour l'interface GUI
    st.plotly_chart(fig, use_container_width=True)

def display_loan_simulator(remaining_capacity):
    """
    Affiche un simulateur de pr√™t bas√© sur la capacit√© restante.
    
    Args:
        remaining_capacity (float): Capacit√© d'emprunt restante mensuelle
    """
    st.subheader("üè¶ Simulation de nouveau pr√™t")
    if remaining_capacity <= 0:
        st.info("Votre capacit√© d'emprunt restante est nulle ou n√©gative. Vous ne pouvez pas contracter de nouveau pr√™t selon ces crit√®res.")
        return

    # Organisation en deux colonnes principales : Param√®tres (1/3) et R√©sultats (2/3)
    params_col, results_col = st.columns([1, 2])
    
    with params_col:
        st.markdown("##### ‚öôÔ∏è Param√®tres du pr√™t")
        
        sim_mensualite = st.number_input(
            "Mensualit√© souhait√©e (‚Ç¨)", 
            min_value=0.0, 
            max_value=float(remaining_capacity * 2),  # Limite √† 2x la capacit√© max
            value=float(remaining_capacity),  # Valeur initiale = capacit√© restante
            step=50.0,
            format="%.0f",
            help=f"Votre capacit√© maximale est de {remaining_capacity:,.0f} ‚Ç¨/mois"
        )
        
        sim_duree_annees = st.number_input(
            "Dur√©e du pr√™t (ann√©es)", 
            min_value=5, 
            max_value=30, 
            value=25, 
            step=1,
            format="%d"
        )
        
        sim_taux_annuel = st.number_input(
            "Taux d'int√©r√™t annuel (%)", 
            min_value=0.5, 
            max_value=10.0, 
            value=3.5, 
            step=0.1,
            format="%.2f"
        )

    with results_col:
        st.markdown("##### üìä R√©sultats de la simulation")
        
        sim_duree_mois = sim_duree_annees * 12
        
        # Calcul du montant empruntable avec la mensualit√© choisie
        montant_empruntable = calculate_loan_principal(sim_mensualite, sim_taux_annuel, sim_duree_mois)

        # Montant empruntable
        st.metric(
            label="Montant empruntable",
            value=f"{montant_empruntable:,.0f} ‚Ç¨"
        )
        
        # Indicateur de d√©passement de capacit√©
        if sim_mensualite > remaining_capacity:
            surplus = sim_mensualite - remaining_capacity
            st.metric(
                label="‚ö†Ô∏è D√©passement de capacit√©",
                value=f"+{surplus:,.0f} ‚Ç¨/mois",
                delta=f"Capacit√© max: {remaining_capacity:,.0f} ‚Ç¨",
                delta_color="inverse"
            )
        else:
            disponible = remaining_capacity - sim_mensualite
            st.metric(
                label="‚úÖ Capacit√© restante",
                value=f"{disponible:,.0f} ‚Ç¨/mois",
                delta=f"Sur {remaining_capacity:,.0f} ‚Ç¨ max",
                delta_color="normal"
            )
        
        # Informations compl√©mentaires
        st.info(f"**R√©capitulatif :** {montant_empruntable:,.0f} ‚Ç¨ sur {sim_duree_annees} ans √† {sim_taux_annuel}%")

def display_weighted_income_details(weighted_income_data):
    """
    Affiche le d√©tail des revenus pris en compte pour le calcul.
    
    Args:
        weighted_income_data (dict): Donn√©es d√©taill√©es des revenus pond√©r√©s
    """
    with st.expander("D√©tail des revenus pris en compte", expanded=False):
        st.markdown(f"""
        - **Salaires totaux :** `{weighted_income_data["salaires"]:,.2f} ‚Ç¨` (pris √† 100%)
        - **Loyers bruts totaux :** `{weighted_income_data["loyers_bruts"]:,.2f} ‚Ç¨`
        - **Loyers pond√©r√©s ({RENTAL_INCOME_WEIGHT:.0%}) :** `{weighted_income_data["loyers_ponderes"]:,.2f} ‚Ç¨`
        - **Total des revenus pond√©r√©s :** `{weighted_income_data["total"]:,.2f} ‚Ç¨`
        
        *Les "Autres revenus" ne sont pas pris en compte dans ce calcul.*
        """)