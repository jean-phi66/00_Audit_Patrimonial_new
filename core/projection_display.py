import streamlit as st
import pandas as pd
import plotly.express as px
from core.projection_logic import calculate_age
from core.charts import create_gantt_chart_fig

def display_settings_ui(parents, enfants):
    """Affiche les widgets pour configurer les param√®tres de la projection."""
    with st.expander("‚öôÔ∏è Param√®tres de la projection", expanded=True):
        duree_projection = st.number_input(
            "Dur√©e de la projection (ann√©es)",
            min_value=1, max_value=50, value=25, step=1,
            help="Nombre d'ann√©es √† projeter apr√®s le d√©part √† la retraite des parents."
        )
        st.markdown("---")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üë®‚Äçüë©‚Äçüëß Parents")
            for parent in parents:
                prenom = parent.get('prenom')
                if prenom:
                    # 1. Initialisation des param√®tres de projection s'ils n'existent pas
                    if prenom not in st.session_state.projection_settings:
                        st.session_state.projection_settings[prenom] = {
                            'retraite': 64, 
                            'revenu_actuel': 0,  # Sera √©cras√© par la synchro
                            'pension_annuelle': 25000
                        }
                    
                    # 2. Synchronisation syst√©matique du revenu depuis la page Flux
                    salaire_mensuel = 0
                    for revenu in st.session_state.get('revenus', []):
                        if revenu.get('type') == 'Salaire' and revenu.get('libelle') == f"Salaire {prenom}":
                            salaire_mensuel = revenu.get('montant', 0)
                            break
                    revenu_annuel_depuis_flux = salaire_mensuel * 12
                    st.session_state.projection_settings[prenom]['revenu_actuel'] = revenu_annuel_depuis_flux

                    # 3. Affichage des param√®tres
                    age_actuel = calculate_age(parent.get('date_naissance'))
                    st.session_state.projection_settings[prenom]['retraite'] = st.number_input(f"√Çge de d√©part √† la retraite de {prenom}", min_value=age_actuel, max_value=75, value=st.session_state.projection_settings[prenom]['retraite'], key=f"retraite_{prenom}")
                    st.number_input(f"Revenu annuel brut de {prenom} (activit√©)", value=st.session_state.projection_settings[prenom]['revenu_actuel'], disabled=True, key=f"revenu_{prenom}", help="Cette valeur est synchronis√©e depuis la page 'Flux' et n'est pas modifiable ici.")
                    st.session_state.projection_settings[prenom]['pension_annuelle'] = st.number_input(f"Pension de retraite annuelle de {prenom}", 0, 200000, st.session_state.projection_settings[prenom].get('pension_annuelle', 25000), step=500, key=f"pension_{prenom}")

        with col2:
            st.subheader("üë∂ Enfants")
            if not enfants:
                st.info("Aucun enfant renseign√©.")
            for enfant in enfants:
                prenom = enfant.get('prenom')
                if prenom:
                    if prenom not in st.session_state.projection_settings:
                        st.session_state.projection_settings[prenom] = {
                            'debut_etudes': 18, 
                            'duree_etudes': 5,
                            'cout_etudes_annuel': 10000
                        }
                    st.session_state.projection_settings[prenom]['debut_etudes'] = st.number_input(f"√Çge de d√©but des √©tudes de {prenom}", 15, 25, st.session_state.projection_settings[prenom]['debut_etudes'], key=f"debut_{prenom}")
                    st.session_state.projection_settings[prenom]['duree_etudes'] = st.number_input(f"Dur√©e des √©tudes de {prenom} (ans)", 1, 8, st.session_state.projection_settings[prenom]['duree_etudes'], key=f"duree_{prenom}")
                    st.session_state.projection_settings[prenom]['cout_etudes_annuel'] = st.number_input(f"Co√ªt annuel des √©tudes de {prenom} (‚Ç¨)", 0, 50000, st.session_state.projection_settings[prenom].get('cout_etudes_annuel', 10000), step=500, key=f"cout_etudes_{prenom}")
                    st.markdown("---")
    return duree_projection, st.session_state.projection_settings

def display_gantt_chart(gantt_data, duree_projection, parents, enfants):
    """Affiche la frise chronologique (diagramme de Gantt)."""
    st.header("üìä Frise Chronologique du Foyer")
    if not gantt_data:
        st.info("Les donn√©es sont insuffisantes ou la p√©riode de projection est trop courte pour g√©n√©rer la frise chronologique.")
        return

    fig = create_gantt_chart_fig(gantt_data, duree_projection, parents, enfants)
    if fig:
        st.plotly_chart(fig, use_container_width=True)

def display_loan_crd_chart(df_projection, passifs):
    """Affiche un graphique de l'√©volution du Capital Restant D√ª des pr√™ts."""
    if not passifs:
        st.info("Aucun passif (pr√™t) renseign√©.")
        return

    # 1. Pr√©paration des donn√©es pour le graphique
    loan_options = {p['id']: p.get('libelle') or f"Pr√™t {p['id'][:4]}..." for p in passifs}
    crd_columns = [col for col in df_projection.columns if col.startswith('CRD_')]
    
    if not crd_columns:
        st.info("Aucune donn√©e de Capital Restant D√ª √† afficher.")
        return

    df_crd = df_projection[['Ann√©e'] + crd_columns].copy()
    df_crd.columns = ['Ann√©e'] + [loan_options.get(col.replace('CRD_', ''), col) for col in df_crd.columns[1:]]
    df_crd = df_crd.set_index('Ann√©e')

    # 2. Cr√©ation du graphique
    fig = px.bar(df_crd, x=df_crd.index, y=df_crd.columns, title="R√©partition du Capital Restant D√ª par Emprunt", labels={'value': "Capital Restant D√ª (‚Ç¨)", 'index': "Ann√©e", 'variable': 'Pr√™t'})
    fig.update_layout(barmode='stack', yaxis_title="Capital Restant D√ª (‚Ç¨)", xaxis_title="Ann√©e", legend_title_text='Pr√™ts')

    st.plotly_chart(fig, use_container_width=True)

def display_projection_table(df_projection):
    """Affiche le tableau de la projection financi√®re."""
    st.subheader("Tableau de projection")
    df_display = df_projection.copy()

    # Identifier les colonnes mon√©taires √† formater pour √©viter les erreurs sur les colonnes de texte (Statut) ou d'√¢ge.
    money_cols = [
        col for col in df_display.columns
        if 'Revenu' in col
        or 'Imp√¥t' in col
        or 'D√©penses' in col
        or 'Reste √† vivre' in col
        or 'Pr√™ts' in col
        or 'Charges' in col
        or 'Taxes' in col
        or 'Co√ªt' in col
        or 'Loyers' in col
        or 'Pr√©l√®vements' in col
    ]
    format_dict = {col: '{:,.0f} ‚Ç¨' for col in money_cols}
    st.dataframe(df_display.style.format(format_dict), use_container_width=True)

def display_projection_chart(df_projection):
    """Affiche le graphique de la projection financi√®re."""
    st.subheader("Graphique de r√©partition des revenus")

    # D√©finir les colonnes √† empiler, dans l'ordre souhait√©
    cols_to_stack = [
        'Reste √† vivre',
        'Pr√©l√®vements Sociaux',
        'Imp√¥t sur le revenu',
        'Co√ªt des √©tudes',
        'Autres D√©penses',
        'Taxes Fonci√®res',
        'Charges Immobili√®res',
        'Mensualit√©s Pr√™ts'
    ]

    # Filtrer les colonnes qui existent r√©ellement dans le df pour √©viter les erreurs
    existing_cols_to_stack = [col for col in cols_to_stack if col in df_projection.columns]

    # Cr√©er le graphique √† barres empil√©es
    fig_bar = px.bar(
        df_projection,
        x='Ann√©e',
        y=existing_cols_to_stack,
        title="R√©partition des revenus du foyer (D√©penses + Reste √† vivre)",
        labels={'value': 'Montant (‚Ç¨)', 'variable': 'Cat√©gorie'},
        height=500
    )

    # Ajouter une ligne pour le total des revenus pour r√©f√©rence
    if 'Revenus du foyer' in df_projection.columns:
        fig_bar.add_scatter(
            x=df_projection['Ann√©e'],
            y=df_projection['Revenus du foyer'],
            mode='lines',
            name='Total des Revenus',
            line=dict(color='black', width=2, dash='dot')
        )

    fig_bar.update_layout(barmode='stack', yaxis_title='Montant (‚Ç¨)', xaxis_title='Ann√©e', legend_title_text='Postes de d√©penses et Reste √† vivre')
    st.plotly_chart(fig_bar, use_container_width=True)

def display_annual_tax_chart(df_projection):
    """Affiche le graphique de l'√©volution de la fiscalit√© annuelle."""
    st.subheader("√âvolution de la fiscalit√© annuelle")
    st.markdown("Ce graphique montre le montant de l'imp√¥t sur le revenu et des pr√©l√®vements sociaux pay√©s chaque ann√©e.")

    df_fiscalite = df_projection[['Ann√©e', 'Imp√¥t sur le revenu', 'Pr√©l√®vements Sociaux']].copy()
    
    # Utiliser melt pour avoir un format long adapt√© √† px.bar avec color
    df_plot = df_fiscalite.melt(id_vars=['Ann√©e'], value_vars=['Imp√¥t sur le revenu', 'Pr√©l√®vements Sociaux'],
                                var_name='Type de fiscalit√©', value_name='Montant')

    fig = px.bar(
        df_plot,
        x='Ann√©e',
        y='Montant',
        color='Type de fiscalit√©',
        title="Fiscalit√© annuelle (Imp√¥t sur le Revenu + Pr√©l√®vements Sociaux)",
        labels={'Montant': 'Montant Annuel (‚Ç¨)'},
        height=400,
        barmode='stack',
        color_discrete_map={
            'Imp√¥t sur le revenu': 'indianred',
            'Pr√©l√®vements Sociaux': 'lightsalmon'
        }
    )
    
    fig.update_layout(
        yaxis_title='Montant Annuel (‚Ç¨)',
        xaxis_title='Ann√©e',
        legend_title_text='Composants'
    )
    st.plotly_chart(fig, use_container_width=True)

def display_cumulative_tax_at_retirement(df_projection, parents, settings):
    """Affiche les m√©triques du cumul de la fiscalit√© au d√©part √† la retraite."""
    st.subheader("Cumul de la fiscalit√© au d√©part √† la retraite")

    df_fiscalite = df_projection[['Ann√©e', 'Imp√¥t sur le revenu', 'Pr√©l√®vements Sociaux']].copy()
    df_fiscalite['Fiscalit√© Annuelle'] = df_fiscalite['Imp√¥t sur le revenu'] + df_fiscalite['Pr√©l√®vements Sociaux']
    df_fiscalite['Fiscalit√© Cumul√©e'] = df_fiscalite['Fiscalit√© Annuelle'].cumsum()

    if not parents:
        st.info("Aucun parent renseign√© pour calculer le cumul.")
        return

    cols = st.columns(len(parents))
    for i, parent in enumerate(parents):
        with cols[i]:
            prenom = parent.get('prenom')
            dob = parent.get('date_naissance')
            if prenom and dob and prenom in settings:
                age_retraite = settings[prenom]['retraite']
                annee_retraite = dob.year + age_retraite

                # Trouver le cumul pour cette ann√©e-l√†
                cumul_data = df_fiscalite[df_fiscalite['Ann√©e'] == annee_retraite]
                if not cumul_data.empty:
                    cumul_a_retraite = cumul_data.iloc[0]['Fiscalit√© Cumul√©e']
                    st.metric(
                        label=f"Total imp√¥ts pay√©s √† la retraite de {prenom} ({annee_retraite})",
                        value=f"{cumul_a_retraite:,.0f} ‚Ç¨",
                        help="Cumul de l'IR et des PS pay√©s depuis le d√©but de la projection jusqu'√† l'ann√©e de d√©part √† la retraite incluse."
                    )
                else:
                    st.metric(
                        label=f"Total imp√¥ts pay√©s √† la retraite de {prenom} ({annee_retraite})",
                        value="N/A",
                        help=f"L'ann√©e de retraite ({annee_retraite}) est en dehors de la p√©riode de projection."
                    )
