import streamlit as st
import pandas as pd
import plotly.express as px
from core.projection_logic import calculate_age
from core.charts import create_gantt_chart_fig

def display_settings_ui(parents, enfants):
    """Affiche les widgets pour configurer les param√®tres de la projection."""
    with st.expander("‚öôÔ∏è Param√®tres de la projection", expanded=True):
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üë®‚Äçüë©‚Äçüëß Parents")
            for parent in parents:
                prenom = parent.get('prenom')
                if prenom:
                    # 1. Initialisation des param√®tres de projection s'ils n'existent pas
                    if prenom not in st.session_state.projection_settings:
                        st.session_state.projection_settings[prenom] = {
                            'retraite': 64, 
                            'revenu_actuel': 0,  # Sera √©cras√© par la synchro
                            'pension_annuelle': 25000
                        }
                    
                    # 2. Synchronisation syst√©matique du revenu depuis la page Flux
                    salaire_mensuel = 0
                    for revenu in st.session_state.get('revenus', []):
                        if revenu.get('type') == 'Salaire' and revenu.get('libelle') == f"Salaire {prenom}":
                            salaire_mensuel = revenu.get('montant', 0)
                            break
                    revenu_annuel_depuis_flux = salaire_mensuel * 12
                    st.session_state.projection_settings[prenom]['revenu_actuel'] = revenu_annuel_depuis_flux

                    # 3. Affichage des param√®tres
                    age_actuel = calculate_age(parent.get('date_naissance'))
                    st.session_state.projection_settings[prenom]['retraite'] = st.number_input(f"√Çge de d√©part √† la retraite de {prenom}", min_value=age_actuel, max_value=75, value=st.session_state.projection_settings[prenom]['retraite'], key=f"retraite_{prenom}")
                    st.number_input(f"Revenu annuel brut de {prenom} (activit√©)", value=st.session_state.projection_settings[prenom]['revenu_actuel'], disabled=True, key=f"revenu_{prenom}", help="Cette valeur est synchronis√©e depuis la page 'Flux' et n'est pas modifiable ici.")
                    st.session_state.projection_settings[prenom]['pension_annuelle'] = st.number_input(f"Pension de retraite annuelle de {prenom}", 0, 200000, st.session_state.projection_settings[prenom].get('pension_annuelle', 25000), step=500, key=f"pension_{prenom}")

        with col2:
            st.subheader("üë∂ Enfants")
            if not enfants:
                st.info("Aucun enfant renseign√©.")
            for enfant in enfants:
                prenom = enfant.get('prenom')
                if prenom:
                    if prenom not in st.session_state.projection_settings:
                        st.session_state.projection_settings[prenom] = {
                            'debut_etudes': 18, 
                            'duree_etudes': 5,
                            'cout_etudes_annuel': 10000
                        }
                    st.session_state.projection_settings[prenom]['debut_etudes'] = st.number_input(f"√Çge de d√©but des √©tudes de {prenom}", 15, 25, st.session_state.projection_settings[prenom]['debut_etudes'], key=f"debut_{prenom}")
                    st.session_state.projection_settings[prenom]['duree_etudes'] = st.number_input(f"Dur√©e des √©tudes de {prenom} (ans)", 1, 8, st.session_state.projection_settings[prenom]['duree_etudes'], key=f"duree_{prenom}")
                    st.session_state.projection_settings[prenom]['cout_etudes_annuel'] = st.number_input(f"Co√ªt annuel des √©tudes de {prenom} (‚Ç¨)", 0, 50000, st.session_state.projection_settings[prenom].get('cout_etudes_annuel', 10000), step=500, key=f"cout_etudes_{prenom}")
                    st.markdown("---")
    return st.session_state.projection_settings

def display_gantt_chart(gantt_data, duree_projection, parents, enfants):
    """Affiche la frise chronologique (diagramme de Gantt)."""
    st.header("üìä Frise Chronologique du Foyer")
    if not gantt_data:
        st.info("Les donn√©es sont insuffisantes ou la p√©riode de projection est trop courte pour g√©n√©rer la frise chronologique.")
        return

    fig = create_gantt_chart_fig(gantt_data, duree_projection, parents, enfants)
    if fig:
        st.plotly_chart(fig, use_container_width=True)

def display_loan_crd_chart(df_projection, passifs):
    """Affiche un graphique de l'√©volution du Capital Restant D√ª des pr√™ts."""
    if not passifs:
        st.info("Aucun passif (pr√™t) renseign√©.")
        return

    # 1. Pr√©paration des donn√©es pour le graphique
    loan_options = {p['id']: p.get('libelle') or f"Pr√™t {p['id'][:4]}..." for p in passifs}
    crd_columns = [col for col in df_projection.columns if col.startswith('CRD_')]
    
    if not crd_columns:
        st.info("Aucune donn√©e de Capital Restant D√ª √† afficher.")
        return

    df_crd = df_projection[['Ann√©e'] + crd_columns].copy()
    df_crd.columns = ['Ann√©e'] + [loan_options.get(col.replace('CRD_', ''), col) for col in df_crd.columns[1:]]
    df_crd = df_crd.set_index('Ann√©e')

    # 2. Cr√©ation du graphique
    fig = px.bar(df_crd, x=df_crd.index, y=df_crd.columns, title="R√©partition du Capital Restant D√ª par Emprunt", labels={'value': "Capital Restant D√ª (‚Ç¨)", 'index': "Ann√©e", 'variable': 'Pr√™t'})
    fig.update_layout(barmode='stack', yaxis_title="Capital Restant D√ª (‚Ç¨)", xaxis_title="Ann√©e", legend_title_text='Pr√™ts')

    # 3. Ajouter les montants totaux au sommet de chaque barre
    # Calculer les totaux par ann√©e
    totaux_par_annee = df_crd.sum(axis=1)
    
    # Ajouter les annotations avec les montants en k‚Ç¨
    for annee, total in totaux_par_annee.items():
        if total > 0:  # Seulement si il y a un montant √† afficher
            fig.add_annotation(
                x=annee,
                y=total,
                text=f"<b>{total/1000:.0f}k‚Ç¨</b>",
                showarrow=False,
                font=dict(color="black", size=12, family="Arial Black"),
                bgcolor="rgba(255,255,255,0.8)",  # Fond blanc semi-transparent
                bordercolor="black",
                borderwidth=1,
                xanchor='center',
                yanchor='bottom',
                yshift=5  # D√©calage vers le haut
            )

    st.plotly_chart(fig, use_container_width=True)

def display_projection_table(df_projection):
    """Affiche le tableau de la projection financi√®re."""
    st.subheader("Tableau de projection")
    df_display = df_projection.copy()

    # Identifier les colonnes mon√©taires √† formater pour √©viter les erreurs sur les colonnes de texte (Statut) ou d'√¢ge.
    money_cols = [
        col for col in df_display.columns
        if 'Revenu' in col
        or 'Imp√¥t' in col
        or 'D√©penses' in col
        or 'Reste √† vivre' in col
        or 'Pr√™ts' in col
        or 'Charges' in col
        or 'Taxes' in col
        or 'Co√ªt' in col
        or 'Loyers' in col
        or 'Pr√©l√®vements' in col
    ]
    format_dict = {col: '{:,.0f} ‚Ç¨' for col in money_cols}
    st.dataframe(df_display.style.format(format_dict), use_container_width=True)

def display_projection_chart(df_projection):
    """Affiche le graphique de la projection financi√®re."""
    st.subheader("Graphique de r√©partition des revenus")

    # D√©finir les colonnes √† empiler, dans l'ordre souhait√©
    cols_to_stack = [
        'Reste √† vivre',
        'Pr√©l√®vements Sociaux',
        'Imp√¥t sur le revenu',
        'Co√ªt des √©tudes',
        'Autres D√©penses',
        'Taxes Fonci√®res',
        'Charges Immobili√®res',
        'Mensualit√©s Pr√™ts'
    ]

    # Filtrer les colonnes qui existent r√©ellement dans le df pour √©viter les erreurs
    existing_cols_to_stack = [col for col in cols_to_stack if col in df_projection.columns]

    # Cr√©er le graphique √† barres empil√©es
    fig_bar = px.bar(
        df_projection,
        x='Ann√©e',
        y=existing_cols_to_stack,
        title="R√©partition des revenus du foyer (D√©penses + Reste √† vivre)",
        labels={'value': 'Montant (‚Ç¨)', 'variable': 'Cat√©gorie'},
        height=500
    )

    # Ajouter une ligne pour le total des revenus pour r√©f√©rence
    if 'Revenus du foyer' in df_projection.columns:
        fig_bar.add_scatter(
            x=df_projection['Ann√©e'],
            y=df_projection['Revenus du foyer'],
            mode='lines',
            name='Total des Revenus',
            line=dict(color='black', width=2, dash='dot')
        )

    fig_bar.update_layout(barmode='stack', yaxis_title='Montant (‚Ç¨)', xaxis_title='Ann√©e', legend_title_text='Postes de d√©penses et Reste √† vivre')
    st.plotly_chart(fig_bar, use_container_width=True)

def display_annual_tax_chart(df_projection):
    """Affiche le graphique de l'√©volution de la fiscalit√© annuelle."""
    st.subheader("√âvolution de la fiscalit√© annuelle")
    st.markdown("Ce graphique montre le montant de l'imp√¥t sur le revenu et des pr√©l√®vements sociaux pay√©s chaque ann√©e.")

    df_fiscalite = df_projection[['Ann√©e', 'Imp√¥t sur le revenu', 'Pr√©l√®vements Sociaux']].copy()
    
    # Utiliser melt pour avoir un format long adapt√© √† px.bar avec color
    df_plot = df_fiscalite.melt(id_vars=['Ann√©e'], value_vars=['Imp√¥t sur le revenu', 'Pr√©l√®vements Sociaux'],
                                var_name='Type de fiscalit√©', value_name='Montant')

    fig = px.bar(
        df_plot,
        x='Ann√©e',
        y='Montant',
        color='Type de fiscalit√©',
        title="Fiscalit√© annuelle (Imp√¥t sur le Revenu + Pr√©l√®vements Sociaux)",
        labels={'Montant': 'Montant Annuel (‚Ç¨)'},
        height=400,
        barmode='stack',
        color_discrete_map={
            'Imp√¥t sur le revenu': 'indianred',
            'Pr√©l√®vements Sociaux': 'lightsalmon'
        }
    )
    
    fig.update_layout(
        yaxis_title='Montant Annuel (‚Ç¨)',
        xaxis_title='Ann√©e',
        legend_title_text='Composants'
    )
    st.plotly_chart(fig, use_container_width=True)

def display_cumulative_tax_at_retirement(df_projection, parents, settings):
    """Affiche les m√©triques du cumul de la fiscalit√© au d√©part √† la retraite."""
    st.subheader("Cumul de la fiscalit√© au d√©part √† la retraite")

    df_fiscalite = df_projection[['Ann√©e', 'Imp√¥t sur le revenu', 'Pr√©l√®vements Sociaux']].copy()
    df_fiscalite['Fiscalit√© Annuelle'] = df_fiscalite['Imp√¥t sur le revenu'] + df_fiscalite['Pr√©l√®vements Sociaux']
    df_fiscalite['Fiscalit√© Cumul√©e'] = df_fiscalite['Fiscalit√© Annuelle'].cumsum()

    if not parents:
        st.info("Aucun parent renseign√© pour calculer le cumul.")
        return

    cols = st.columns(len(parents))
    for i, parent in enumerate(parents):
        with cols[i]:
            prenom = parent.get('prenom')
            dob = parent.get('date_naissance')
            if prenom and dob and prenom in settings:
                age_retraite = settings[prenom]['retraite']
                annee_retraite = dob.year + age_retraite

                # Trouver le cumul pour cette ann√©e-l√†
                cumul_data = df_fiscalite[df_fiscalite['Ann√©e'] == annee_retraite]
                if not cumul_data.empty:
                    cumul_a_retraite = cumul_data.iloc[0]['Fiscalit√© Cumul√©e']
                    st.metric(
                        label=f"Total imp√¥ts pay√©s √† la retraite de {prenom} ({annee_retraite})",
                        value=f"{cumul_a_retraite:,.0f} ‚Ç¨",
                        help="Cumul de l'IR et des PS pay√©s depuis le d√©but de la projection jusqu'√† l'ann√©e de d√©part √† la retraite incluse."
                    )
                else:
                    st.metric(
                        label=f"Total imp√¥ts pay√©s √† la retraite de {prenom} ({annee_retraite})",
                        value="N/A",
                        help=f"L'ann√©e de retraite ({annee_retraite}) est en dehors de la p√©riode de projection."
                    )

def display_retirement_transition_analysis(df_projection, parents, settings):
    """Affiche l'analyse de la transition vers la retraite avec graphiques en barres et KPI."""
    st.subheader("üîç Transition vers la retraite")
    
    if not parents:
        st.info("Aucun parent renseign√© pour l'analyse de transition.")
        return
    
    if df_projection.empty:
        st.warning("Aucune donn√©e de projection disponible pour l'analyse.")
        return
    
    # Identifier les ann√©es de d√©part √† la retraite des parents
    annees_retraite = []
    for parent in parents:
        prenom = parent.get('prenom')
        dob = parent.get('date_naissance')
        
        if prenom and dob and prenom in settings:
            age_retraite = settings[prenom]['retraite']
            annee_retraite = dob.year + age_retraite
            annees_retraite.append((annee_retraite, prenom))
    
    if not annees_retraite:
        st.warning("Informations manquantes pour calculer les ann√©es de d√©part √† la retraite.")
        return
    
    # Trier les ann√©es de retraite
    annees_retraite.sort()
    premiere_retraite = annees_retraite[0][0]
    
    # Cr√©er les options pour les selectbox
    annees_disponibles = sorted(df_projection['Ann√©e'].unique())
    
    # Options pour l'ann√©e 1 (situation actuelle et ann√©es avant d√©parts)
    options_annee1 = {}
    annee_actuelle = min(annees_disponibles)
    options_annee1[f"Situation actuelle ({annee_actuelle})"] = annee_actuelle
    
    # Ajouter les ann√©es avant chaque d√©part √† la retraite
    for annee_retraite, prenom in annees_retraite:
        annee_avant_retraite = annee_retraite - 1
        if annee_avant_retraite in annees_disponibles and annee_avant_retraite != annee_actuelle:
            if len(annees_retraite) == 1:
                # Un seul parent
                options_annee1[f"Ann√©e avant d√©part ({annee_avant_retraite})"] = annee_avant_retraite
            else:
                # Plusieurs parents - sp√©cifier le nom
                options_annee1[f"Avant retraite de {prenom} ({annee_avant_retraite})"] = annee_avant_retraite
    
    # Options pour l'ann√©e 2 (ann√©es apr√®s les d√©parts √† la retraite)
    options_annee2 = {}
    for annee_retraite, prenom in annees_retraite:
        if annee_retraite in annees_disponibles:
            if len(annees_retraite) == 1:
                options_annee2[f"Premi√®re ann√©e de retraite ({annee_retraite})"] = annee_retraite
            else:
                options_annee2[f"Retraite de {prenom} ({annee_retraite})"] = annee_retraite
    
    # Ajouter les ann√©es suivantes si disponibles
    for annee in annees_disponibles:
        if annee > premiere_retraite and annee not in [ar[0] for ar in annees_retraite]:
            options_annee2[f"Ann√©e {annee}"] = annee
    
    if not options_annee2:
        st.warning("Aucune ann√©e de retraite disponible dans les donn√©es de projection.")
        return
    
    # Interface de s√©lection des ann√©es
    st.markdown("### ÔøΩ S√©lection des ann√©es √† comparer")
    
    col1, col2 = st.columns(2)
    
    with col1:
        annee1_key = st.selectbox(
            "Ann√©e 1 (r√©f√©rence)",
            options=list(options_annee1.keys()),
            index=0,
            key="transition_annee1_selectbox",
            help="Choisissez l'ann√©e de r√©f√©rence (situation avant retraite)"
        )
        annee1 = options_annee1[annee1_key]
    
    with col2:
        annee2_key = st.selectbox(
            "Ann√©e 2 (comparaison)",
            options=list(options_annee2.keys()),
            index=0,
            key="transition_annee2_selectbox",
            help="Choisissez l'ann√©e de comparaison (situation apr√®s retraite)"
        )
        annee2 = options_annee2[annee2_key]
    
    # V√©rifier que les ann√©es sont diff√©rentes
    if annee1 == annee2:
        st.error("‚ö†Ô∏è Veuillez s√©lectionner deux ann√©es diff√©rentes pour la comparaison.")
        return
    
    st.info(f"üìä **Comparaison s√©lectionn√©e :** {annee1_key} vs {annee2_key}")
    
    # Filtrer les donn√©es pour les deux ann√©es s√©lectionn√©es
    df_transition = df_projection[
        df_projection['Ann√©e'].isin([annee1, annee2])
    ].copy()
    
    if df_transition.empty:
        st.warning(f"Aucune donn√©e disponible pour les ann√©es {annee1} et {annee2}.")
        return
    
    # Pr√©parer les donn√©es pour le graphique (conversion en montants mensuels)
    # Ordre des cat√©gories simplifi√©es avec regroupement fiscal
    categories_ordre = [
        'Reste √† vivre',
        'Fiscalit√© & Taxes',  # Regroupement IR + PS + Taxes Fonci√®res
        'Co√ªt des √©tudes',
        'Autres D√©penses',
        'Charges Immobili√®res',
        'Mensualit√©s Pr√™ts'
    ]
    
    donnees_graphique = []
    for _, row in df_transition.iterrows():
        annee = int(row['Ann√©e'])
        if annee == annee1:
            label_annee = f"Ann√©e {annee}\n({annee1_key.split('(')[0].strip()})"
        else:
            label_annee = f"Ann√©e {annee}\n({annee2_key.split('(')[0].strip()})"
        
        # Regrouper les cat√©gories fiscales
        fiscalite_total = (
            row.get('Pr√©l√®vements Sociaux', 0) +
            row.get('Imp√¥t sur le revenu', 0) +
            row.get('Taxes Fonci√®res', 0)
        )
        
        # Conversion des montants annuels en mensuels et empilement
        # Logique identique aux graphiques de projection : empiler toutes les composantes
        categories_donnees = {
            'Reste √† vivre': row.get('Reste √† vivre', 0),
            'Fiscalit√© & Taxes': fiscalite_total,
            'Co√ªt des √©tudes': row.get('Co√ªt des √©tudes', 0),
            'Autres D√©penses': row.get('Autres D√©penses', 0),
            'Charges Immobili√®res': row.get('Charges Immobili√®res', 0),
            'Mensualit√©s Pr√™ts': row.get('Mensualit√©s Pr√™ts', 0)
        }
        
        for categorie in categories_ordre:
            if categorie in categories_donnees and categories_donnees[categorie] > 0:
                montant_mensuel = categories_donnees[categorie] / 12
                donnees_graphique.append({
                    'P√©riode': label_annee, 
                    'Type': categorie, 
                    'Montant': montant_mensuel, 
                    'Valeur_num': montant_mensuel
                })
    
    df_graph = pd.DataFrame(donnees_graphique)
    
    # Cr√©er le graphique en barres empil√©es avec les m√™mes couleurs que les projections
    import plotly.express as px
    
    # Carte de couleurs coh√©rente avec les graphiques de projection (adapt√©e aux nouvelles cat√©gories)
    couleurs_projection = [
        '#636EFA',  # Reste √† vivre (bleu)
        '#EF553B',  # Fiscalit√© & Taxes (rouge - regroupement IR+PS+Taxes)
        '#AB63FA',  # Co√ªt des √©tudes (violet)
        '#FFA15A',  # Autres D√©penses (orange)
        '#FF6692',  # Charges Immobili√®res (rose)
        '#B6E880',  # Mensualit√©s Pr√™ts (vert clair)
    ]
    
    color_discrete_map = {}
    for i, categorie in enumerate(categories_ordre):
        if i < len(couleurs_projection):
            color_discrete_map[categorie] = couleurs_projection[i]
    
    fig = px.bar(
        df_graph,
        x='P√©riode',
        y='Montant',
        color='Type',
        title="Comparaison des revenus mensuels : R√©partition par poste de d√©pense",
        labels={'Montant': 'Montant Mensuel (‚Ç¨)', 'P√©riode': ''},
        height=500,
        color_discrete_map=color_discrete_map,
        category_orders={'Type': categories_ordre}
    )
    
    # Ajouter une ligne pour les revenus totaux (r√©f√©rence)
    periodes = []
    revenus = []
    for _, row in df_transition.iterrows():
        annee = int(row['Ann√©e'])
        if annee == annee1:
            label_annee = f"Ann√©e {annee}\n({annee1_key.split('(')[0].strip()})"
        else:
            label_annee = f"Ann√©e {annee}\n({annee2_key.split('(')[0].strip()})"
        
        periodes.append(label_annee)
        revenus.append(row['Revenus du foyer'] / 12)
    
    fig.add_scatter(
        x=periodes,
        y=revenus,
        mode='markers+text',
        name='Total Revenus',
        text=[f"<b>{r:,.0f}‚Ç¨</b>" for r in revenus],  # Texte en gras
        textposition="top center",
        textfont=dict(size=16, color='red'),  # Police plus grande et rouge
        marker=dict(color='red', size=12, symbol='diamond'),
        showlegend=True
    )
    
    # Personnaliser l'affichage
    fig.update_layout(
        yaxis_title='Montant Mensuel (‚Ç¨)',
        xaxis_title='',
        legend_title_text='Postes de d√©penses',
        barmode='stack',  # Mode empil√© comme les projections
        width=800,  # Largeur fixe du graphique pour contr√¥ler l'espacement
        bargap=0.6  # Augmenter l'espacement entre les barres pour les rendre plus √©lanc√©es
    )
    
    # R√©duire significativement la largeur des barres pour un aspect plus √©lanc√©
    fig.update_traces(width=0.25, selector=dict(type='bar'))
    
    # Ajouter les valeurs au centre de chaque barre (solution anti-superposition avanc√©e)
    # Calculer les positions Y pour centrer le texte dans chaque segment
    for periode in df_graph['P√©riode'].unique():
        df_periode = df_graph[df_graph['P√©riode'] == periode].copy()
        
        # Trier selon l'ordre des cat√©gories pour calculer les positions correctement
        df_periode['ordre'] = df_periode['Type'].map({cat: i for i, cat in enumerate(categories_ordre)})
        df_periode = df_periode.sort_values('ordre')
        
        # Calculer le total pour cette p√©riode pour d√©terminer la strat√©gie d'affichage
        total_periode = df_periode['Montant'].sum()
        
        # Calculer les positions Y cumul√©es et d√©terminer quels montants afficher
        cumul = 0
        annotations_a_afficher = []
        
        for _, row in df_periode.iterrows():
            montant = row['Montant']
            categorie = row['Type']
            if montant > 0:  # Seulement pour les montants positifs
                # Position Y au centre du segment
                y_position = cumul + (montant / 2)
                
                # Calculer la hauteur du segment pour d√©terminer si on peut afficher
                hauteur_segment = montant
                pourcentage_du_total = (montant / total_periode) * 100 if total_periode > 0 else 0
                
                # Crit√®res d'affichage plus stricts pour √©viter les superpositions
                afficher_montant = False
                font_size = 10
                
                if hauteur_segment >= 300 and pourcentage_du_total >= 15:
                    # Segments larges et significatifs - afficher cat√©gorie + montant
                    afficher_montant = True
                    font_size = 11
                elif hauteur_segment >= 200 and pourcentage_du_total >= 10:
                    # Segments moyens - afficher cat√©gorie + montant
                    afficher_montant = True
                    font_size = 10
                elif hauteur_segment >= 150 and pourcentage_du_total >= 8:
                    # Petits segments - afficher seulement le montant
                    afficher_montant = True
                    font_size = 9
                
                # Formater le texte selon la taille du segment
                if montant >= 1000:
                    text_montant = f"{montant/1000:.1f}k‚Ç¨"
                else:
                    text_montant = f"{montant:.0f}‚Ç¨"
                
                # Cr√©er le texte d'annotation avec ou sans cat√©gorie selon l'espace
                if hauteur_segment >= 200 and pourcentage_du_total >= 10:
                    # Segments suffisamment grands : afficher cat√©gorie + montant avec style √©l√©gant
                    categorie_courte = {
                        'Reste √† vivre': 'Reste √† vivre',
                        'Fiscalit√© & Taxes': 'Fiscalit√©', 
                        'Co√ªt des √©tudes': '√âtudes',
                        'Autres D√©penses': 'Autres',
                        'Charges Immobili√®res': 'Charges Immo',
                        'Mensualit√©s Pr√™ts': 'Pr√™ts'
                    }.get(categorie, categorie)
                    
                    # Formatage simplifi√© sans s√©parateurs d√©coratifs
                    text_annotation = f"{categorie_courte}\n{text_montant}"
                else:
                    # Petits segments : seulement le montant
                    text_annotation = text_montant
                
                if afficher_montant:
                    annotations_a_afficher.append({
                        'x': periode,
                        'y': y_position,
                        'text': text_annotation,
                        'font_size': font_size,
                        'hauteur': hauteur_segment,
                        'categorie': categorie
                    })
                
                cumul += montant
        
        # V√©rifier et ajuster les annotations pour √©viter les superpositions
        # Trier par position Y pour d√©tecter les conflits
        annotations_a_afficher.sort(key=lambda x: x['y'])
        
        # Filtrer les annotations trop proches (√©viter superposition)
        annotations_finales = []
        derniere_y = -1000  # Position tr√®s basse pour commencer
        
        for ann in annotations_a_afficher:
            # Distance minimale entre les annotations (en pixels approximatifs)
            distance_min = 40  # Ajustable selon la hauteur du graphique
            
            if ann['y'] - derniere_y >= distance_min:
                annotations_finales.append(ann)
                derniere_y = ann['y']
            elif len(annotations_finales) == 0:
                # Garder au moins une annotation si c'est la premi√®re
                annotations_finales.append(ann)
                derniere_y = ann['y']
        
        # Si on a trop peu d'annotations visibles, garder les plus importantes
        if len(annotations_finales) < len(annotations_a_afficher) and len(annotations_finales) < 3:
            # Reprendre les 2-3 segments les plus importants
            annotations_importantes = sorted(annotations_a_afficher, 
                                           key=lambda x: x['hauteur'], 
                                           reverse=True)[:3]
            
            # Espacer verticalement ces annotations importantes
            if len(annotations_importantes) > 1:
                annotations_finales = []
                for i, ann in enumerate(annotations_importantes):
                    # Espacer les annotations sur la hauteur disponible
                    espacement = total_periode / (len(annotations_importantes) + 1)
                    nouvelle_y = espacement * (i + 1)
                    ann['y'] = nouvelle_y
                    annotations_finales.append(ann)
            else:
                annotations_finales = annotations_importantes
        
        # Ajouter les annotations finales au graphique avec un style am√©lior√©
        for ann in annotations_finales:
            # D√©finir les couleurs selon la cat√©gorie pour plus de coh√©rence
            couleur_fond = {
                'Reste √† vivre': 'rgba(99, 110, 250, 0.9)',  # Bleu - correspond √† #636EFA
                'Fiscalit√©': 'rgba(239, 85, 59, 0.9)',       # Rouge - correspond √† #EF553B  
                '√âtudes': 'rgba(171, 99, 250, 0.9)',         # Violet - correspond √† #AB63FA
                'Autres': 'rgba(255, 161, 90, 0.9)',         # Orange - correspond √† #FFA15A
                'Charges Immo': 'rgba(255, 102, 146, 0.9)',  # Rose - correspond √† #FF6692
                'Pr√™ts': 'rgba(182, 232, 128, 0.9)'          # Vert clair - correspond √† #B6E880
            }
            
            # Extraire la cat√©gorie du texte d'annotation
            categorie_key = ann['text'].split('\n')[0] if '\n' in ann['text'] else 'Autres'
            bg_color = couleur_fond.get(categorie_key, 'rgba(50, 50, 50, 0.85)')
            
            fig.add_annotation(
                x=ann['x'],
                y=ann['y'],
                text=f"<b style='color:white;'>{ann['text']}</b>",
                showarrow=False,
                font=dict(
                    color="white", 
                    size=ann['font_size'], 
                    family="Inter, -apple-system, BlinkMacSystemFont, sans-serif"
                ),
                bgcolor=bg_color,
                bordercolor="rgba(255, 255, 255, 0.3)",
                borderwidth=1,
                borderpad=4,
                xanchor='center',
                yanchor='middle',
                # Ajouter un effet d'ombre
                opacity=0.95,
                # Coins arrondis simul√©s avec du padding
                width=None,
                height=None
            )
    
    st.plotly_chart(fig, use_container_width=False, width=800)
    
    # Calcul des KPI de comparaison (en montants mensuels)
    data_annee1 = df_transition[df_transition['Ann√©e'] == annee1].iloc[0]
    data_annee2 = df_transition[df_transition['Ann√©e'] == annee2].iloc[0]
    
    # Conversion en montants mensuels
    revenus_annee1_mensuel = data_annee1['Revenus du foyer'] / 12
    revenus_annee2_mensuel = data_annee2['Revenus du foyer'] / 12
    reste_annee1_mensuel = data_annee1['Reste √† vivre'] / 12
    reste_annee2_mensuel = data_annee2['Reste √† vivre'] / 12
    
    # Calcul des ratios
    ratio_revenus = (revenus_annee2_mensuel / revenus_annee1_mensuel) if revenus_annee1_mensuel > 0 else 0
    ratio_reste_vivre = (reste_annee2_mensuel / reste_annee1_mensuel) if reste_annee1_mensuel > 0 else 0
    
    # Affichage des KPI
    st.markdown("### üìä Indicateurs de transition (montants mensuels)")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label=f"Revenus {annee1}",
            value=f"{revenus_annee1_mensuel:,.0f} ‚Ç¨/mois",
            help=f"Revenus mensuels moyens pendant l'ann√©e {annee1}"
        )
    
    with col2:
        variation_revenus = revenus_annee2_mensuel - revenus_annee1_mensuel
        st.metric(
            label=f"Revenus {annee2}",
            value=f"{revenus_annee2_mensuel:,.0f} ‚Ç¨/mois",
            delta=f"{variation_revenus:,.0f} ‚Ç¨",
            help=f"Revenus mensuels moyens pendant l'ann√©e {annee2}"
        )
    
    with col3:
        st.metric(
            label=f"Reste √† vivre {annee1}",
            value=f"{reste_annee1_mensuel:,.0f} ‚Ç¨/mois",
            help=f"Capacit√© d'√©pargne mensuelle moyenne pendant l'ann√©e {annee1}"
        )
    
    with col4:
        variation_reste_vivre = reste_annee2_mensuel - reste_annee1_mensuel
        st.metric(
            label=f"Reste √† vivre {annee2}",
            value=f"{reste_annee2_mensuel:,.0f} ‚Ç¨/mois",
            delta=f"{variation_reste_vivre:,.0f} ‚Ç¨",
            help=f"Capacit√© d'√©pargne mensuelle moyenne pendant l'ann√©e {annee2}"
        )
    
    # Ratios
    st.markdown("### üéØ Ratios de transition")
    col1, col2 = st.columns(2)
    
    with col1:
        couleur_revenus = "normal" if ratio_revenus >= 0.8 else "inverse"
        st.metric(
            label=f"Ratio Revenus ({annee2}/{annee1})",
            value=f"{ratio_revenus:.1%}",
            delta=f"{(ratio_revenus - 1):.1%}",
            delta_color=couleur_revenus,
            help=f"Pourcentage de maintien des revenus mensuels entre {annee1} et {annee2}"
        )
    
    with col2:
        couleur_reste = "normal" if ratio_reste_vivre >= 0.8 else "inverse"
        st.metric(
            label=f"Ratio Reste √† vivre ({annee2}/{annee1})",
            value=f"{ratio_reste_vivre:.1%}",
            delta=f"{(ratio_reste_vivre - 1):.1%}",
            delta_color=couleur_reste,
            help=f"Pourcentage de maintien de la capacit√© d'√©pargne mensuelle entre {annee1} et {annee2}"
        )
    
    # Tableau d√©taill√© de comparaison
    st.markdown("### üìã D√©tail de la comparaison par cat√©gorie (montants mensuels)")
    
    # Pr√©paration des donn√©es pour le tableau
    # Colonnes d'int√©r√™t et leurs libell√©s - toutes les cat√©gories du graphique
    colonnes_comparaison = {
        # Revenus
        'Revenus bruts du foyer': 'üíº Salaires et pensions',
        'Loyers per√ßus': 'ÔøΩÔ∏è Revenus locatifs',
        'Autres revenus': 'üí∞ Autres revenus',
        'Revenus du foyer': 'üìä TOTAL REVENUS',
        # Charges et d√©penses (toutes les cat√©gories du graphique)
        'Mensualit√©s Pr√™ts': 'üè† Mensualit√©s Pr√™ts',
        'Charges Immobili√®res': 'üîß Charges Immobili√®res',
        'Taxes Fonci√®res': 'üèõÔ∏è Taxes Fonci√®res',
        'Autres D√©penses': 'üõí Autres D√©penses',
        'Co√ªt des √©tudes': 'üéì Co√ªt des √©tudes',
        'Imp√¥t sur le revenu': 'üí∏ Imp√¥t sur le revenu',
        'Pr√©l√®vements Sociaux': 'üè• Pr√©l√®vements Sociaux',
        # Totaux et r√©sultats
        'Total charges': 'üìä TOTAL CHARGES',
        'Reste √† vivre': 'üíé RESTE √Ä VIVRE'
    }
    
    # Cr√©ation du tableau de comparaison
    data_tableau = []
    
    for colonne, libelle in colonnes_comparaison.items():
        if colonne in data_annee1.index and colonne in data_annee2.index:
            montant_annuel_annee1 = data_annee1[colonne]
            montant_annuel_annee2 = data_annee2[colonne]
            
            # Conversion en montants mensuels
            montant_mensuel_annee1 = montant_annuel_annee1 / 12
            montant_mensuel_annee2 = montant_annuel_annee2 / 12
            
            # Calcul de la variation mensuelle
            variation_mensuelle = montant_mensuel_annee2 - montant_mensuel_annee1
            variation_pourcentage = (variation_mensuelle / montant_mensuel_annee1 * 100) if montant_mensuel_annee1 != 0 else 0
            
            # D√©terminer le type de ligne pour le style
            is_total_line = 'TOTAL' in colonne or 'RESTE √Ä VIVRE' in colonne
            
            data_tableau.append({
                'Cat√©gorie': libelle,
                f'{annee1} (‚Ç¨/mois)': f"{montant_mensuel_annee1:,.0f}",
                f'{annee2} (‚Ç¨/mois)': f"{montant_mensuel_annee2:,.0f}",
                'Variation (‚Ç¨/mois)': f"{variation_mensuelle:+,.0f}",
                'Variation (%)': f"{variation_pourcentage:+.1f}%",
                'is_total': is_total_line
            })
    
    df_tableau = pd.DataFrame(data_tableau)
    
    # S√©parer les donn√©es par type pour un meilleur affichage
    df_revenus = df_tableau[df_tableau['Cat√©gorie'].str.contains('üíº|ÔøΩÔ∏è|üí∞|üìä.*REVENUS')]
    df_charges = df_tableau[df_tableau['Cat√©gorie'].str.contains('üè†|üîß|üèõÔ∏è|üõí|üéì|üí∏|üè•')]
    df_totaux = df_tableau[df_tableau['Cat√©gorie'].str.contains('üìä.*CHARGES|üíé')]
    
    # Fonction de style pour le tableau
    def style_tableau_complet(df):
        """Applique un style selon le type de ligne"""
        styles = []
        for _, row in df.iterrows():
            if row.get('is_total', False):
                styles.append(['background-color: #f0f0f0; font-weight: bold'] * (len(row) - 1))
            else:
                styles.append([''] * (len(row) - 1))
        return styles
    
    def color_variation(val):
        """Colore les variations selon leur signe"""
        if isinstance(val, str):
            if val.startswith('+') and not val.startswith('+0'):
                return 'color: green; font-weight: bold'
            elif val.startswith('-'):
                return 'color: red; font-weight: bold'
        return ''
    
    # Affichage des tableaux par section avec largeurs de colonnes optimis√©es
    if not df_revenus.empty:
        st.markdown("#### üí∞ Revenus")
        df_revenus_display = df_revenus.drop('is_total', axis=1)
        styled_revenus = df_revenus_display.style.apply(
            lambda x: ['background-color: #f0f0f0; font-weight: bold'] * len(x) if 'üìä' in x['Cat√©gorie'] else [''] * len(x), 
            axis=1
        )
        styled_revenus = styled_revenus.applymap(color_variation, subset=['Variation (‚Ç¨/mois)', 'Variation (%)'])
        
        st.dataframe(
            styled_revenus, 
            use_container_width=False,
            hide_index=True,
            column_config={
                "Cat√©gorie": st.column_config.TextColumn("Cat√©gorie", width="medium"),
                f"{annee1} (‚Ç¨/mois)": st.column_config.TextColumn(f"{annee1} (‚Ç¨/mois)", width="small"),
                f"{annee2} (‚Ç¨/mois)": st.column_config.TextColumn(f"{annee2} (‚Ç¨/mois)", width="small"),
                "Variation (‚Ç¨/mois)": st.column_config.TextColumn("Variation (‚Ç¨/mois)", width="small"),
                "Variation (%)": st.column_config.TextColumn("Variation (%)", width="small")
            }
        )
    
    if not df_charges.empty:
        st.markdown("#### üí≥ Charges et d√©penses")
        df_charges_display = df_charges.drop('is_total', axis=1)
        styled_charges = df_charges_display.style.apply(lambda x: [''] * len(x), axis=1)
        styled_charges = styled_charges.applymap(color_variation, subset=['Variation (‚Ç¨/mois)', 'Variation (%)'])
        
        st.dataframe(
            styled_charges, 
            use_container_width=False,
            hide_index=True,
            column_config={
                "Cat√©gorie": st.column_config.TextColumn("Cat√©gorie", width="medium"),
                f"{annee1} (‚Ç¨/mois)": st.column_config.TextColumn(f"{annee1} (‚Ç¨/mois)", width="small"),
                f"{annee2} (‚Ç¨/mois)": st.column_config.TextColumn(f"{annee2} (‚Ç¨/mois)", width="small"),
                "Variation (‚Ç¨/mois)": st.column_config.TextColumn("Variation (‚Ç¨/mois)", width="small"),
                "Variation (%)": st.column_config.TextColumn("Variation (%)", width="small")
            }
        )
    
    if not df_totaux.empty:
        st.markdown("#### üìä Synth√®se")
        df_totaux_display = df_totaux.drop('is_total', axis=1)
        styled_totaux = df_totaux_display.style.apply(
            lambda x: ['background-color: #f0f0f0; font-weight: bold'] * len(x), axis=1
        )
        styled_totaux = styled_totaux.applymap(color_variation, subset=['Variation (‚Ç¨/mois)', 'Variation (%)'])
        
        st.dataframe(
            styled_totaux, 
            use_container_width=False,
            hide_index=True,
            column_config={
                "Cat√©gorie": st.column_config.TextColumn("Cat√©gorie", width="medium"),
                f"{annee1} (‚Ç¨/mois)": st.column_config.TextColumn(f"{annee1} (‚Ç¨/mois)", width="small"),
                f"{annee2} (‚Ç¨/mois)": st.column_config.TextColumn(f"{annee2} (‚Ç¨/mois)", width="small"),
                "Variation (‚Ç¨/mois)": st.column_config.TextColumn("Variation (‚Ç¨/mois)", width="small"),
                "Variation (%)": st.column_config.TextColumn("Variation (%)", width="small")
            }
        )
    
    # Note explicative
    st.caption(
        f"üí° **Note :** Ce tableau compare les montants mensuels entre {annee1} (derni√®re ann√©e avant retraite) "
        f"et {annee2} (premi√®re ann√©e de retraite compl√®te). Les variations positives sont en vert, "
        f"les n√©gatives en rouge. Toutes les cat√©gories correspondent exactement aux segments du graphique ci-dessus."
    )
