#!/usr/bin/env python3
"""
Script de d√©monstration pour le g√©n√©rateur de graphiques.

Ce script montre diff√©rentes utilisations du g√©n√©rateur de graphiques
avec des donn√©es d'exemple vari√©es.
"""

import os
import subprocess
import json
from datetime import date

def create_sample_data():
    """Cr√©e des donn√©es d'exemple plus compl√®tes pour la d√©monstration."""
    sample_data = {
        "parents": [
            {
                "prenom": "Alexandre",
                "date_naissance": {"_type": "date", "value": "1975-03-20"}
            },
            {
                "prenom": "Isabelle", 
                "date_naissance": {"_type": "date", "value": "1978-09-15"}
            }
        ],
        "enfants": [
            {
                "prenom": "Thomas",
                "date_naissance": {"_type": "date", "value": "2008-06-12"},
                "garde_alternee": False
            },
            {
                "prenom": "Emma",
                "date_naissance": {"_type": "date", "value": "2011-01-25"},
                "garde_alternee": False
            },
            {
                "prenom": "Lucas",
                "date_naissance": {"_type": "date", "value": "2014-11-08"},
                "garde_alternee": False
            }
        ],
        "actifs": [
            {
                "id": "maison_principale",
                "libelle": "Maison familiale",
                "type": "Immobilier de jouissance",
                "valeur": 450000.0,
                "charges": 300.0,
                "taxe_fonciere": 1800.0,
                "loyer": 0.0
            },
            {
                "id": "appartement_paris",
                "libelle": "Studio Paris 11√®me",
                "type": "Immobilier productif", 
                "valeur": 320000.0,
                "charges": 180.0,
                "taxe_fonciere": 1200.0,
                "loyer": 1400.0
            },
            {
                "id": "maison_secondaire",
                "libelle": "Maison secondaire Bretagne",
                "type": "Immobilier de jouissance",
                "valeur": 180000.0,
                "charges": 100.0,
                "taxe_fonciere": 600.0,
                "loyer": 0.0
            },
            {
                "id": "livret_a",
                "libelle": "Livret A",
                "type": "Actifs financiers",
                "valeur": 22950.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            },
            {
                "id": "pea_alexandre", 
                "libelle": "PEA Alexandre",
                "type": "Actifs financiers",
                "valeur": 67500.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            },
            {
                "id": "pea_isabelle",
                "libelle": "PEA Isabelle",
                "type": "Actifs financiers",
                "valeur": 54200.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            },
            {
                "id": "av_alexandre",
                "libelle": "Assurance vie Alexandre",
                "type": "Actifs financiers",
                "valeur": 125000.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            },
            {
                "id": "av_isabelle",
                "libelle": "Assurance vie Isabelle", 
                "type": "Actifs financiers",
                "valeur": 89000.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            },
            {
                "id": "voiture_1",
                "libelle": "Voiture familiale",
                "type": "Autres actifs",
                "valeur": 18000.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            },
            {
                "id": "voiture_2",
                "libelle": "Voiture citadine",
                "type": "Autres actifs", 
                "valeur": 12000.0,
                "charges": 0.0,
                "taxe_fonciere": 0.0,
                "loyer": 0.0
            }
        ],
        "passifs": [
            {
                "id": "pret_maison",
                "libelle": "Pr√™t maison principale",
                "montant_initial": 360000.0,
                "taux_annuel": 1.3,
                "duree_mois": 300,
                "date_debut": {"_type": "date", "value": "2019-03-01"},
                "crd_calcule": 285000.0
            },
            {
                "id": "pret_paris",
                "libelle": "Pr√™t studio Paris",
                "montant_initial": 250000.0,
                "taux_annuel": 1.7,
                "duree_mois": 300,
                "date_debut": {"_type": "date", "value": "2021-09-01"},
                "crd_calcule": 210000.0
            }
        ],
        "revenus": [
            {
                "id": "salaire_alexandre",
                "libelle": "Salaire Alexandre",
                "montant": 5800.0,
                "type": "Salaire"
            },
            {
                "id": "salaire_isabelle", 
                "libelle": "Salaire Isabelle",
                "montant": 4200.0,
                "type": "Salaire"
            },
            {
                "id": "loyer_paris",
                "libelle": "Loyer studio Paris",
                "montant": 1400.0,
                "type": "Patrimoine",
                "source_id": "appartement_paris"
            },
            {
                "id": "prime_alexandre",
                "libelle": "Prime trimestrielle Alexandre",
                "montant": 750.0,
                "type": "Autre"
            },
            {
                "id": "dividendes",
                "libelle": "Dividendes actions",
                "montant": 200.0,
                "type": "Patrimoine"
            }
        ],
        "depenses": [
            {
                "id": "mensualite_maison",
                "libelle": "Mensualit√© pr√™t maison",
                "montant": 1380.0,
                "categorie": "Logement",
                "source_id": "pret_maison"
            },
            {
                "id": "mensualite_paris",
                "libelle": "Mensualit√© pr√™t Paris",
                "montant": 980.0,
                "categorie": "Logement", 
                "source_id": "pret_paris"
            },
            {
                "id": "charges_maison",
                "libelle": "Charges maison",
                "montant": 300.0,
                "categorie": "Logement",
                "source_id": "maison_principale"
            },
            {
                "id": "charges_paris",
                "libelle": "Charges studio Paris",
                "montant": 180.0,
                "categorie": "Logement",
                "source_id": "appartement_paris"
            },
            {
                "id": "charges_bretagne",
                "libelle": "Charges maison Bretagne",
                "montant": 100.0,
                "categorie": "Logement", 
                "source_id": "maison_secondaire"
            },
            {
                "id": "taxe_maison",
                "libelle": "Taxe fonci√®re maison",
                "montant": 150.0,
                "categorie": "Imp√¥ts et taxes",
                "source_id": "maison_principale"
            },
            {
                "id": "taxe_paris",
                "libelle": "Taxe fonci√®re Paris",
                "montant": 100.0,
                "categorie": "Imp√¥ts et taxes",
                "source_id": "appartement_paris"
            },
            {
                "id": "taxe_bretagne", 
                "libelle": "Taxe fonci√®re Bretagne",
                "montant": 50.0,
                "categorie": "Imp√¥ts et taxes",
                "source_id": "maison_secondaire"
            },
            {
                "id": "alimentation",
                "libelle": "Alimentation",
                "montant": 1200.0,
                "categorie": "D√©penses courantes"
            },
            {
                "id": "transport",
                "libelle": "Transport (essence, p√©age, etc.)",
                "montant": 600.0,
                "categorie": "Transport"
            },
            {
                "id": "assurances",
                "libelle": "Assurances (auto, habitation, etc.)",
                "montant": 350.0,
                "categorie": "Assurances"
            },
            {
                "id": "loisirs",
                "libelle": "Loisirs et sorties",
                "montant": 500.0,
                "categorie": "Loisirs"
            },
            {
                "id": "enfants",
                "libelle": "Frais enfants (√©cole, activit√©s)",
                "montant": 800.0,
                "categorie": "Enfants"
            },
            {
                "id": "sante",
                "libelle": "Sant√© (mutuelle, m√©decins)",
                "montant": 200.0,
                "categorie": "Sant√©"
            },
            {
                "id": "impot_revenu",
                "libelle": "Imp√¥t sur le revenu",
                "montant": 1100.0,
                "categorie": "Imp√¥ts et taxes"
            },
            {
                "id": "epargne_pension",
                "libelle": "√âpargne retraite (PER)",
                "montant": 400.0,
                "categorie": "√âpargne"
            }
        ],
        "projection_settings": {},
        "reorganisation_data": [],
        "epargne_precaution": 0.0,
        "reserve_projet": 0.0,
        "per_input_parameters": {},
        "scpi_credit_parameters": {}
    }
    
    return sample_data

def run_demo():
    """Lance la d√©monstration compl√®te."""
    print("üöÄ D√©monstration du g√©n√©rateur de graphiques")
    print("=" * 50)
    
    # 1. Cr√©er les donn√©es d'exemple avanc√©es
    print("\nüìã Cr√©ation des donn√©es d'exemple avanc√©es...")
    sample_data = create_sample_data()
    
    # Sauvegarder les donn√©es
    demo_file = "demo_data.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(sample_data, f, indent=2, ensure_ascii=False)
    print(f"‚úÖ Donn√©es sauvegard√©es dans {demo_file}")
    
    # Afficher un r√©sum√© des donn√©es
    print("\nüìä R√©sum√© des donn√©es :")
    total_actifs = sum(a['valeur'] for a in sample_data['actifs'])
    total_passifs = sum(p['crd_calcule'] for p in sample_data['passifs'])
    patrimoine_net = total_actifs - total_passifs
    
    total_revenus = sum(r['montant'] for r in sample_data['revenus'])
    total_depenses = sum(d['montant'] for d in sample_data['depenses'])
    capacite_epargne = total_revenus - total_depenses
    
    print(f"   üë• Foyer: {len(sample_data['parents'])} parents, {len(sample_data['enfants'])} enfants")
    print(f"   üè† Patrimoine: {total_actifs:,.0f} ‚Ç¨ (actifs) - {total_passifs:,.0f} ‚Ç¨ (passifs) = {patrimoine_net:,.0f} ‚Ç¨ (net)")
    print(f"   üí∞ Flux: {total_revenus:,.0f} ‚Ç¨ (revenus) - {total_depenses:,.0f} ‚Ç¨ (d√©penses) = {capacite_epargne:,.0f} ‚Ç¨ (√©pargne)")
    
    # 2. Test 1: G√©n√©ration compl√®te (PNG + HTML)
    print(f"\nüéØ Test 1: G√©n√©ration compl√®te (PNG + HTML)")
    result = subprocess.run([
        'python', 'generate_charts.py', demo_file, '--output', 'demo_complete'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ G√©n√©ration compl√®te r√©ussie")
        file_count = len([f for f in os.listdir('demo_complete') if f.endswith(('.png', '.html'))])
        print(f"   üìÅ {file_count} fichiers g√©n√©r√©s dans demo_complete/")
    else:
        print(f"‚ùå Erreur: {result.stderr}")
    
    # 3. Test 2: PNG seulement
    print(f"\nüéØ Test 2: PNG seulement")
    result = subprocess.run([
        'python', 'generate_charts.py', demo_file, '--output', 'demo_png', '--no-html'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ G√©n√©ration PNG r√©ussie")
        png_count = len([f for f in os.listdir('demo_png') if f.endswith('.png')])
        print(f"   üñºÔ∏è {png_count} fichiers PNG g√©n√©r√©s dans demo_png/")
    else:
        print(f"‚ùå Erreur: {result.stderr}")
    
    # 4. Test 3: HTML seulement  
    print(f"\nüéØ Test 3: HTML seulement")
    result = subprocess.run([
        'python', 'generate_charts.py', demo_file, '--output', 'demo_html', '--no-png'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ G√©n√©ration HTML r√©ussie")
        html_count = len([f for f in os.listdir('demo_html') if f.endswith('.html')])
        print(f"   üåê {html_count} fichiers HTML g√©n√©r√©s dans demo_html/")
    else:
        print(f"‚ùå Erreur: {result.stderr}")
    
    # 5. R√©sum√© final
    print(f"\nüéâ D√©monstration termin√©e !")
    print(f"üìÅ R√©sultats disponibles dans :")
    print(f"   ‚Ä¢ demo_complete/ : Tous formats (PNG + HTML)")
    print(f"   ‚Ä¢ demo_png/ : PNG seulement") 
    print(f"   ‚Ä¢ demo_html/ : HTML seulement")
    print(f"\nüìñ Consultez README_CHARTS.md pour plus d'informations")

if __name__ == "__main__":
    run_demo()