import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import date

import sys
import os
# Add project root to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)


from core.fiscal_logic import get_revenus_imposables

try:
    from utils.openfisca_utils import analyser_fiscalite_foyer, simuler_evolution_fiscalite, add_bracket_lines_to_fig
    OPENFISCA_UTILITY_AVAILABLE = True
except ImportError as e:
    OPENFISCA_UTILITY_AVAILABLE = False
    st.session_state.openfisca_import_error = str(e)

def display_summary(results):
    """Affiche la synth√®se des r√©sultats fiscaux."""
    st.header("üìä Synth√®se de votre imposition")
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Imp√¥t sur le Revenu Net", f"{results['ir_net']:,.2f} ‚Ç¨")
    col2.metric("Pr√©l√®vements Sociaux (foncier)", f"{results['ps_foncier']:,.2f} ‚Ç¨")
    col3.metric("Taux Marginal d'Imposition (TMI)", f"{results['tmi']:.0f} %")
    col4.metric("Taux d'imposition global", f"{results['taux_imposition_global']:.2f} %", help="Total (IR + PS) / Total des revenus bruts")

def display_quotient_familial_analysis(results):
    """Affiche l'analyse de l'impact du quotient familial."""
    st.header("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Analyse du Quotient Familial")

    col1, col2, col3 = st.columns(3)
    col1.metric("Nombre de parts fiscales", f"{results['parts_fiscales']:.2f}")
    col2.metric("Imp√¥t SANS quotient familial", f"{results['ir_sans_quotient']:,.2f} ‚Ç¨", help="Imp√¥t qui serait d√ª sans les parts fiscales des enfants.")
    col3.metric(
        "Gain li√© au quotient familial",
        f"{results['gain_quotient']:,.2f} ‚Ç¨",
        delta=f"{results['gain_quotient']:,.2f} ‚Ç¨ d'√©conomie",
        delta_color="inverse"
    )
    st.info("Le gain du quotient familial repr√©sente l'√©conomie d'imp√¥t r√©alis√©e gr√¢ce aux parts fiscales apport√©es par les personnes √† charge (principalement les enfants).")

def display_tax_calculation_waterfall(results):
    """Affiche un graphique en cascade du calcul de l'imp√¥t."""
    st.header("üåä D√©composition du calcul de l'imp√¥t")

    fig = go.Figure(go.Waterfall(
        name="Calcul IR",
        orientation="v",
        measure=["absolute", "relative", "total", "relative", "total"],
        x=[
            "Revenu Brut Global", "Abattement 10% (ou frais r√©els)",
            "Revenu Net Imposable", "Application du bar√®me",
            "Imp√¥t sur le Revenu Net"
        ],
        textposition="outside",
        y=[
            results['revenu_brut_global'],
            -(results['revenu_brut_global'] - results['revenu_net_imposable']),
            None, # Total
            -results['ir_net'], # Simplification : on montre directement l'imp√¥t final
            None # Total
        ],
        text=[
            f"{results['revenu_brut_global']:,.0f} ‚Ç¨",
            f"-{(results['revenu_brut_global'] - results['revenu_net_imposable']):,.0f} ‚Ç¨",
            f"{results['revenu_net_imposable']:,.0f} ‚Ç¨",
            f"-{results['ir_net']:,.0f} ‚Ç¨",
            f"{results['ir_net']:,.0f} ‚Ç¨"
        ],
        connector={"line": {"color": "rgb(63, 63, 63)"}},
    ))

    fig.update_layout(
        title="Du Revenu Brut Global √† l'Imp√¥t Net",
        showlegend=False,
        yaxis_title="Montant (‚Ç¨)"
    )
    st.plotly_chart(fig, use_container_width=True)

def debug_fisca(results):
    st.header('input to OpenFisca')
    st.json(results['simulation_data'], expanded=False)

def display_income_evolution_chart(results, total_salary, revenu_max_simu):
    """Affiche le graphique de l'√©volution de l'imp√¥t en fonction du revenu."""
    st.header("√âvolution de l'imp√¥t selon le revenu")

    df_evolution = results.get('df_evolution')
    bareme = results.get('bareme')
    ir_actuel = results.get('ir_net')

    if df_evolution is None or df_evolution.empty:
        st.warning("Les donn√©es pour le graphique d'√©volution n'ont pas pu √™tre g√©n√©r√©es.")
        return

    fig = px.line(df_evolution, x='Revenu', y='IR', labels={'Revenu': 'Revenu brut global (‚Ç¨)', 'IR': "Montant de l'IR (‚Ç¨)"})
    
    if bareme:
        fig = add_bracket_lines_to_fig(fig, df_evolution, bareme)

    # Ajouter le point pour la situation actuelle
    fig.add_scatter(
        x=[total_salary], 
        y=[ir_actuel], 
        mode='markers+text',
        marker=dict(color='red', size=10), 
        name='Votre situation',
        text=[f"{ir_actuel:,.0f} ‚Ç¨"],
        textposition="top center"
    )
    
    fig.update_layout(xaxis_ticksuffix='‚Ç¨', yaxis_ticksuffix='‚Ç¨', xaxis_range=[0, revenu_max_simu])
    st.plotly_chart(fig, use_container_width=True)

#def main():
st.title("üîé Focus Fiscalit√©")
st.markdown("Analysez en d√©tail l'imposition sur le revenu de votre foyer pour l'ann√©e en cours.")

# --- V√©rifications initiales ---
if not OPENFISCA_UTILITY_AVAILABLE:
    error_msg = st.session_state.get('openfisca_import_error', "Erreur inconnue.")
    st.error(
        "**Le module OpenFisca n'a pas pu √™tre charg√©.** L'analyse fiscale ne peut pas √™tre effectu√©e.\n\n"
        f"**Erreur technique :** `{error_msg}`\n\n"
        "Veuillez vous assurer que le package `openfisca-france` est bien install√© dans votre environnement Python."
    )
    st.stop()

if 'parents' not in st.session_state or not st.session_state.parents:
    st.warning("‚ö†Ô∏è Veuillez d'abord renseigner les informations du foyer dans la page **1_Famille**.")
    st.stop()

# --- Pr√©paration des donn√©es ---
parents = st.session_state.get('parents', [])
enfants = st.session_state.get('enfants', []) 

total_salary_check = sum(r.get('montant', 0) for r in st.session_state.get('revenus', []) if r.get('type') == 'Salaire')

if total_salary_check == 0:
    st.warning("‚ö†Ô∏è Veuillez renseigner les salaires dans la page **4_Flux** pour lancer l'analyse.")
    st.stop()

# --- Param√®tres de simulation ---
st.sidebar.header("Param√®tres de l'analyse")
annee_simulation = st.sidebar.number_input("Ann√©e d'imposition", min_value=2020, max_value=date.today().year, value=date.today().year)

# D√©tection automatique du parent isol√©, avec possibilit√© de forcer
is_single_parent_auto = len(parents) == 1 and len(enfants) > 0
if is_single_parent_auto:
    est_parent_isole = st.sidebar.checkbox(
        "Cocher la case T (Parent isol√©)", 
        value=is_single_parent_auto,
        help="Cochez cette case si vous √™tes c√©libataire, divorc√©(e), s√©par√©(e) ou veuf(ve) et que vous vivez seul(e) avec vos enfants √† charge."
    )
else:
    est_parent_isole = False

# Calculer les revenus en amont pour les utiliser dans les valeurs par d√©faut des widgets.
revenus_salaires, revenu_foncier_net = get_revenus_imposables(annee_simulation)

revenu_max_graphique = st.sidebar.number_input(
    "Revenu maximum pour les graphiques", 
    min_value=50000, max_value=500000, value=max(150000, int(sum(revenus_salaires.values()) * 1.2)), step=10000
)

# --- Lancement de l'analyse ---
with st.spinner("Analyse de la fiscalit√© en cours avec OpenFisca..."):
    try:
        resultats_fiscaux = analyser_fiscalite_foyer(
            annee=annee_simulation,
            parents=parents,
            enfants=enfants,
            revenus_annuels=revenus_salaires,
            revenu_foncier_net=revenu_foncier_net,
            est_parent_isole=est_parent_isole
        )

        # Lancer la simulation pour le graphique
        df_evolution, bareme = simuler_evolution_fiscalite(
            annee=annee_simulation, parents=parents, enfants=enfants,
            revenu_foncier_net=revenu_foncier_net, est_parent_isole=est_parent_isole,
            revenu_max_simu=revenu_max_graphique
        )
        resultats_fiscaux['df_evolution'] = df_evolution
        resultats_fiscaux['bareme'] = bareme
    except Exception as e:
        st.error(f"Une erreur est survenue lors du calcul avec OpenFisca : {e}")
        st.stop()

# --- Affichage des r√©sultats ---
display_summary(resultats_fiscaux)
st.markdown("---")
display_quotient_familial_analysis(resultats_fiscaux)
#st.markdown("---")
#display_tax_calculation_waterfall(resultats_fiscaux)
st.markdown("---")
display_income_evolution_chart(resultats_fiscaux, sum(revenus_salaires.values()), revenu_max_graphique)
st.markdown("---")
debug_fisca(resultats_fiscaux)
