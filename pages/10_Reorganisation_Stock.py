import streamlit as st
import pandas as pd
from core.patrimoine_logic import get_patrimoine_df

def initialize_reorganisation_state():
    """Initialise les donn√©es de r√©organisation dans le session_state"""
    if 'reorganisation_data' not in st.session_state:
        st.session_state.reorganisation_data = []
    if 'epargne_precaution' not in st.session_state:
        st.session_state.epargne_precaution = 0.0
    if 'reserve_projet' not in st.session_state:
        st.session_state.reserve_projet = 0.0

def get_financial_assets():
    """R√©cup√®re les actifs financiers depuis le patrimoine"""
    financial_assets = []
    for actif in st.session_state.get('actifs', []):
        if actif.get('type') == "Actifs financiers":
            financial_assets.append({
                'id': actif.get('id'),
                'libelle': actif.get('libelle', ''),
                'valeur': actif.get('valeur', 0.0),
                'reorientable': False,
                'montant_reorientable': 0.0
            })
    return financial_assets

def update_reorganisation_data():
    """Met √† jour les donn√©es de r√©organisation avec les actifs financiers actuels"""
    current_financial_assets = get_financial_assets()
    existing_ids = {item['id'] for item in st.session_state.reorganisation_data}
    
    # Ajouter les nouveaux actifs financiers
    for asset in current_financial_assets:
        if asset['id'] not in existing_ids:
            st.session_state.reorganisation_data.append(asset)
    
    # Supprimer les actifs qui n'existent plus
    st.session_state.reorganisation_data = [
        item for item in st.session_state.reorganisation_data
        if item['id'] in {asset['id'] for asset in current_financial_assets}
    ]
    
    # Mettre √† jour les valeurs des actifs existants
    asset_values = {asset['id']: asset['valeur'] for asset in current_financial_assets}
    for item in st.session_state.reorganisation_data:
        if item['id'] in asset_values:
            item['valeur'] = asset_values[item['id']]

def display_reorganisation_ui():
    """Affiche l'interface de r√©organisation des stocks"""
    st.header("üìä R√©organisation des Actifs Financiers")
    
    # V√©rifier s'il y a des actifs financiers
    if not any(actif.get('type') == "Actifs financiers" for actif in st.session_state.get('actifs', [])):
        st.warning("‚ö†Ô∏è Aucun actif financier trouv√© dans votre patrimoine.")
        st.info("Veuillez d'abord ajouter des actifs financiers dans la section 'Description du patrimoine'.")
        return
    
    # Mise √† jour des donn√©es
    update_reorganisation_data()
    
    #st.markdown("---")
    st.subheader("S√©lection des actifs √† r√©orienter")
    
    if not st.session_state.reorganisation_data:
        st.info("Aucun actif financier √† afficher.")
        return
    
    # Conteneur pour limiter la largeur du tableau
    tableau_col, espace_col = st.columns([8, 4])
    
    with tableau_col:
        # En-t√™tes de colonnes
        col1, col2, col3, col4 = st.columns([2, 1.3, 0.7, 1.3])
        with col1:
            st.markdown("**Actif financier**")
        with col2:
            st.markdown("**Valeur totale**")
        with col3:
            st.markdown("**√Ä r√©orienter**")
        with col4:
            st.markdown("**Montant r√©orientable**")
        
        #st.markdown("---")
        
        # Affichage sous forme de tableau interactif
        for i, item in enumerate(st.session_state.reorganisation_data):
            col1, col2, col3, col4 = st.columns([2, 1.3, 0.7, 1.3])
            
            with col1:
                st.write(f"**{item['libelle']}**")
            
            with col2:
                st.write(f"{item['valeur']:,.2f} ‚Ç¨")
            
            with col3:
                # G√©rer le changement d'√©tat de la checkbox
                was_reorientable = item.get('reorientable', False)
                item['reorientable'] = st.checkbox(
                    "Y/N",
                    value=was_reorientable,
                    key=f"reorientable_{i}_{item['id']}"
                )
                
                # Si l'√©tat change de False √† True, mettre 100% par d√©faut
                if item['reorientable'] and not was_reorientable:
                    item['montant_reorientable'] = item['valeur']
                elif not item['reorientable']:
                    item['montant_reorientable'] = 0.0
            
            with col4:
                if item['reorientable']:
                    # Utiliser la valeur compl√®te par d√©faut si pas encore d√©finie
                    default_value = item.get('montant_reorientable', item['valeur'])
                    if default_value == 0.0:
                        default_value = item['valeur']
                    
                    item['montant_reorientable'] = st.number_input(
                        "",
                        value=default_value,
                        min_value=0.0,
                        max_value=item['valeur'],
                        step=100.0,
                        format="%.2f",
                        key=f"montant_{i}_{item['id']}",
                        label_visibility="collapsed"
                    )
                else:
                    item['montant_reorientable'] = 0.0
                    st.write("‚Äî")
            
            # Ajouter un s√©parateur plus fin seulement si ce n'est pas la derni√®re ligne
            #if i < len(st.session_state.reorganisation_data) - 1:
             #   st.markdown("<hr style='margin: 0.5rem 0; border: none; border-top: 1px solid #e0e0e0;'>", unsafe_allow_html=True)    # R√©sum√©
    display_reorganisation_summary()

def display_reorganisation_summary():
    """Affiche le r√©sum√© de la r√©organisation"""
    st.subheader("üìà R√©sum√© de la r√©organisation")
    
    # Calculs de base
    total_patrimoine_financier = sum(item['valeur'] for item in st.session_state.reorganisation_data)
    total_reorientable = sum(
        item['montant_reorientable'] 
        for item in st.session_state.reorganisation_data 
        if item['reorientable']
    )
    
    # Calcul de l'√©pargne bloqu√©e (actifs non s√©lectionn√©s pour r√©orientation)
    epargne_bloquee = total_patrimoine_financier - total_reorientable
    
    # Calcul du stock mobilisable apr√®s d√©duction des r√©serves
    stock_mobilisable = max(0, total_reorientable - st.session_state.epargne_precaution - st.session_state.reserve_projet)
    
    # Calcul du pourcentage r√©orientable
    if total_patrimoine_financier == 0:
        pourcentage_reorientable = 0
    else:
        pourcentage_reorientable = (total_reorientable / total_patrimoine_financier) * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Patrimoine financier total",
            f"{total_patrimoine_financier:,.2f} ‚Ç¨"
        )
    
    with col2:
        st.metric(
            "Montant r√©orientable",
            f"{total_reorientable:,.2f} ‚Ç¨"
        )
    
    with col3:
        st.metric(
            "% du patrimoine",
            f"{pourcentage_reorientable:.1f}%"
        )
    
    # D√©tail des actifs r√©orientables
    if total_reorientable > 0:
        st.markdown("### D√©tail des actifs s√©lectionn√©s pour r√©orientation")
        
        reorientable_assets = [
            item for item in st.session_state.reorganisation_data 
            if item['reorientable'] and item['montant_reorientable'] > 0
        ]
        
        if reorientable_assets:
            df_reorientable = pd.DataFrame([
                {
                    'Actif': item['libelle'],
                    'Valeur totale (‚Ç¨)': f"{item['valeur']:,.2f}",
                    'Montant r√©orientable (‚Ç¨)': f"{item['montant_reorientable']:,.2f}",
                    '% de l\'actif': f"{(item['montant_reorientable'] / item['valeur'] * 100):.1f}%"
                }
                for item in reorientable_assets
            ])
            
            st.dataframe(df_reorientable, use_container_width=True, hide_index=True)
        
        # Section pour les r√©serves
        st.markdown("---")
        st.markdown("### üõ°Ô∏è Gestion des r√©serves et stock mobilisable")
    
    # Organisation en 3 colonnes : inputs √† gauche, espace au milieu, KPIs √† droite
    reserve_col, espace_col, kpi_col = st.columns([1, 0.2, 2])
    
    with reserve_col:
        st.markdown("#### R√©serves √† d√©duire")
        st.session_state.epargne_precaution = st.number_input(
            "üí∞ √âpargne de pr√©caution (‚Ç¨)",
            value=st.session_state.get('epargne_precaution', 0.0),
            min_value=0.0,
            step=1000.0,
            format="%.2f",
            help="Montant √† conserver en √©pargne de s√©curit√©"
        )
        
        st.session_state.reserve_projet = st.number_input(
            "üèóÔ∏è R√©serve projet (travaux, etc.) (‚Ç¨)",
            value=st.session_state.get('reserve_projet', 0.0),
            min_value=0.0,
            step=1000.0,
            format="%.2f",
            help="Montant √† r√©server pour des projets futurs"
        )
    
    # Calcul du stock mobilisable APR√àS la mise √† jour des inputs
    stock_mobilisable = max(0, total_reorientable - st.session_state.epargne_precaution - st.session_state.reserve_projet)
    
    with kpi_col:
        st.markdown("#### Indicateurs patrimoniaux")
        
        # Premi√®re ligne : patrimoine total, √©pargne bloqu√©e, stock r√©orientable
        kpi_row1_col1, kpi_row1_col2, kpi_row1_col3 = st.columns(3)
        
        with kpi_row1_col1:
            st.metric(
                "üí∞ Stock financier total",
                f"{total_patrimoine_financier:,.2f} ‚Ç¨",
                help="Somme de tous vos actifs financiers"
            )
        
        with kpi_row1_col2:
            st.metric(
                "üîí √âpargne bloqu√©e",
                f"{epargne_bloquee:,.2f} ‚Ç¨",
                help="Actifs financiers non s√©lectionn√©s pour r√©orientation"
            )
        
        with kpi_row1_col3:
            st.metric(
                "üíº Stock r√©orientable",
                f"{total_reorientable:,.2f} ‚Ç¨",
                help="Montant s√©lectionn√© pour r√©orientation"
            )
        
        # Deuxi√®me ligne : d√©ductions et r√©sultat final
        kpi_row2_col1, kpi_row2_col2, kpi_row2_col3 = st.columns(3)
        
        with kpi_row2_col1:
            st.metric(
                "üõ°Ô∏è √âpargne de pr√©caution",
                f"{st.session_state.epargne_precaution:,.2f} ‚Ç¨",
                help="Montant √† d√©duire du stock r√©orientable pour la s√©curit√©"
            )
        
        with kpi_row2_col2:
            st.metric(
                "üèóÔ∏è R√©serve projet",
                f"{st.session_state.reserve_projet:,.2f} ‚Ç¨",
                help="Montant √† d√©duire du stock r√©orientable pour vos projets"
            )
        
        with kpi_row2_col3:
            # Calcul du pourcentage du stock mobilisable par rapport au stock financier total
            if total_patrimoine_financier > 0:
                pourcentage_mobilisable = (stock_mobilisable / total_patrimoine_financier) * 100
            else:
                pourcentage_mobilisable = 0
            
            # Couleur selon le montant disponible
            delta_color = "normal" if stock_mobilisable > 0 else "inverse"
            
            # Affichage du delta avec le pourcentage
            if stock_mobilisable >= 0:
                delta_text = f"{pourcentage_mobilisable:.1f}% du total"
            else:
                delta_text = "R√©serves trop √©lev√©es"
            
            st.metric(
                "üöÄ **STOCK MOBILISABLE**",
                f"{stock_mobilisable:,.2f} ‚Ç¨",
                delta=delta_text,
                help=f"Stock r√©orientable ({total_reorientable:,.2f} ‚Ç¨) - √âpargne de pr√©caution ({st.session_state.epargne_precaution:,.2f} ‚Ç¨) - R√©serve projet ({st.session_state.reserve_projet:,.2f} ‚Ç¨)"
            )
    
    # Message informatif
    if stock_mobilisable > 0:
        st.success(f"‚úÖ Vous disposez de **{stock_mobilisable:,.2f} ‚Ç¨** mobilisables pour vos objectifs patrimoniaux.")
    elif stock_mobilisable == 0:
        st.warning("‚ö†Ô∏è Aucun montant disponible apr√®s d√©duction des r√©serves.")
    else:
        st.error("‚ùå Les r√©serves d√©passent le montant r√©orientable. Veuillez ajuster vos param√®tres.")

# --- Ex√©cution principale ---
st.title("üîÑ R√©organisation Stock")
st.markdown("S√©lectionnez les actifs financiers que vous souhaitez r√©orienter et d√©finissez les montants.")

# Initialisation
initialize_reorganisation_state()

# Affichage de l'interface
display_reorganisation_ui()
